
Robot_Actuator_Voja_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001f7  00800100  00800100  00000a9e  2**0
                  ALLOC
  2 .debug_aranges 00000118  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001db  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b89  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004ef  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d2f  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000325  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000042d  00000000  00000000  0000300d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  0000343a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	TCCR0A = (1 << WGM01) | (1 << CS02);
	TIMSK0 |= (1 << OCIE0A);
	OCR0A = 43;
	
	SREG |= 0x80;
}
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e2       	ldi	r30, 0x2A	; 42
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	12 e0       	ldi	r17, 0x02	; 2
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 3f       	cpi	r26, 0xF7	; 247
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	f2 d2       	rcall	.+1508   	; 0x6b0 <main>
  cc:	ac c4       	rjmp	.+2392   	; 0xa26 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <colectThePopcorn>:
	}
}//END OF knockDownTheClapperboards

void colectThePopcorn(unsigned char side)
{
	if(side == 1)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	19 f5       	brne	.+70     	; 0x11a <colectThePopcorn+0x4a>
	{
		AX_SetAngle(60, 180, 1, AX_SERVO2);//otvori ruku za uzimanje kokica sa desne strane
  d4:	8c e3       	ldi	r24, 0x3C	; 60
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	64 eb       	ldi	r22, 0xB4	; 180
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	22 e0       	ldi	r18, 0x02	; 2
  e0:	82 d2       	rcall	.+1284   	; 0x5e6 <AX_SetAngle>
  e2:	20 e1       	ldi	r18, 0x10	; 16
  e4:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	44 e1       	ldi	r20, 0x14	; 20
  e8:	51 e0       	ldi	r21, 0x01	; 1
  ea:	ca 01       	movw	r24, r20
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <colectThePopcorn+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d1 f7       	brne	.-12     	; 0xea <colectThePopcorn+0x1a>
		_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO2);//zatvori ruku za uzimanje kokica sa desne strane
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	64 eb       	ldi	r22, 0xB4	; 180
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	22 e0       	ldi	r18, 0x02	; 2
 102:	71 d2       	rcall	.+1250   	; 0x5e6 <AX_SetAngle>
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	37 e2       	ldi	r19, 0x27	; 39
 108:	44 e1       	ldi	r20, 0x14	; 20
 10a:	51 e0       	ldi	r21, 0x01	; 1
 10c:	ca 01       	movw	r24, r20
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <colectThePopcorn+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d1 f7       	brne	.-12     	; 0x10c <colectThePopcorn+0x3c>
 118:	08 95       	ret
		_delay_ms(1000);	
		
	}else
	{
		AX_SetAngle(60, 180, 1, AX_SERVO4);//otvori ruku za uzimanje kokica sa leve strane
 11a:	8c e3       	ldi	r24, 0x3C	; 60
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	64 eb       	ldi	r22, 0xB4	; 180
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	24 e0       	ldi	r18, 0x04	; 4
 126:	5f d2       	rcall	.+1214   	; 0x5e6 <AX_SetAngle>
 128:	20 e1       	ldi	r18, 0x10	; 16
 12a:	37 e2       	ldi	r19, 0x27	; 39
 12c:	44 e1       	ldi	r20, 0x14	; 20
 12e:	51 e0       	ldi	r21, 0x01	; 1
 130:	ca 01       	movw	r24, r20
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <colectThePopcorn+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 136:	21 50       	subi	r18, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d1 f7       	brne	.-12     	; 0x130 <colectThePopcorn+0x60>
		_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO4);//zatvori ruku za uzimanje kokica sa leve strane
 13c:	80 ea       	ldi	r24, 0xA0	; 160
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	64 eb       	ldi	r22, 0xB4	; 180
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	24 e0       	ldi	r18, 0x04	; 4
 148:	4e d2       	rcall	.+1180   	; 0x5e6 <AX_SetAngle>
 14a:	20 e1       	ldi	r18, 0x10	; 16
 14c:	37 e2       	ldi	r19, 0x27	; 39
 14e:	44 e1       	ldi	r20, 0x14	; 20
 150:	51 e0       	ldi	r21, 0x01	; 1
 152:	ca 01       	movw	r24, r20
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <colectThePopcorn+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d1 f7       	brne	.-12     	; 0x152 <colectThePopcorn+0x82>
 15e:	08 95       	ret

00000160 <knockDownTheClapperboards>:
#include "uart.h"
#include "can.h"

void knockDownTheClapperboards(unsigned char side)
{
	if(side == 1)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	19 f5       	brne	.+70     	; 0x1aa <knockDownTheClapperboards+0x4a>
	{
		AX_SetAngle(60, 180, 1, AX_SERVO1);//izbaci udaraljku sa desne strane
 164:	8c e3       	ldi	r24, 0x3C	; 60
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	64 eb       	ldi	r22, 0xB4	; 180
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	3a d2       	rcall	.+1140   	; 0x5e6 <AX_SetAngle>
 172:	20 e1       	ldi	r18, 0x10	; 16
 174:	37 e2       	ldi	r19, 0x27	; 39
 176:	44 e1       	ldi	r20, 0x14	; 20
 178:	51 e0       	ldi	r21, 0x01	; 1
 17a:	ca 01       	movw	r24, r20
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <knockDownTheClapperboards+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	21 50       	subi	r18, 0x01	; 1
 182:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d1 f7       	brne	.-12     	; 0x17a <knockDownTheClapperboards+0x1a>
			_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO1);//uvuce udaraljku sa desne strane
 186:	80 ea       	ldi	r24, 0xA0	; 160
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	64 eb       	ldi	r22, 0xB4	; 180
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	29 d2       	rcall	.+1106   	; 0x5e6 <AX_SetAngle>
 194:	20 e1       	ldi	r18, 0x10	; 16
 196:	37 e2       	ldi	r19, 0x27	; 39
 198:	44 e1       	ldi	r20, 0x14	; 20
 19a:	51 e0       	ldi	r21, 0x01	; 1
 19c:	ca 01       	movw	r24, r20
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <knockDownTheClapperboards+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d1 f7       	brne	.-12     	; 0x19c <knockDownTheClapperboards+0x3c>
 1a8:	08 95       	ret
			_delay_ms(1000);
		
	}else
	{
		AX_SetAngle(160, 180, 1, AX_SERVO3);//izbaci udaraljku sa leve strane
 1aa:	80 ea       	ldi	r24, 0xA0	; 160
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	64 eb       	ldi	r22, 0xB4	; 180
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	23 e0       	ldi	r18, 0x03	; 3
 1b6:	17 d2       	rcall	.+1070   	; 0x5e6 <AX_SetAngle>
 1b8:	20 e1       	ldi	r18, 0x10	; 16
 1ba:	37 e2       	ldi	r19, 0x27	; 39
 1bc:	44 e1       	ldi	r20, 0x14	; 20
 1be:	51 e0       	ldi	r21, 0x01	; 1
 1c0:	ca 01       	movw	r24, r20
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <knockDownTheClapperboards+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <knockDownTheClapperboards+0x60>
			_delay_ms(1000);
		AX_SetAngle(60, 180, 1, AX_SERVO3);//uvuce udaraljku sa leve strane
 1cc:	8c e3       	ldi	r24, 0x3C	; 60
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	64 eb       	ldi	r22, 0xB4	; 180
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	23 e0       	ldi	r18, 0x03	; 3
 1d8:	06 d2       	rcall	.+1036   	; 0x5e6 <AX_SetAngle>
 1da:	20 e1       	ldi	r18, 0x10	; 16
 1dc:	37 e2       	ldi	r19, 0x27	; 39
 1de:	44 e1       	ldi	r20, 0x14	; 20
 1e0:	51 e0       	ldi	r21, 0x01	; 1
 1e2:	ca 01       	movw	r24, r20
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <knockDownTheClapperboards+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d1 f7       	brne	.-12     	; 0x1e2 <knockDownTheClapperboards+0x82>
 1ee:	08 95       	ret

000001f0 <action>:
		_delay_ms(1000);
	}
}//END OF colectThePopcorn

void action(canMsg msg)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2a 97       	sbiw	r28, 0x0a	; 10
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	09 83       	std	Y+1, r16	; 0x01
 20a:	1a 83       	std	Y+2, r17	; 0x02
 20c:	2b 83       	std	Y+3, r18	; 0x03
 20e:	3c 83       	std	Y+4, r19	; 0x04
 210:	4d 83       	std	Y+5, r20	; 0x05
 212:	5e 83       	std	Y+6, r21	; 0x06
 214:	6f 83       	std	Y+7, r22	; 0x07
 216:	78 87       	std	Y+8, r23	; 0x08
 218:	89 87       	std	Y+9, r24	; 0x09
 21a:	9a 87       	std	Y+10, r25	; 0x0a
 21c:	81 2f       	mov	r24, r17
	unsigned char command = msg.data[0];
	unsigned char side = msg.data[1];
	
	switch(command)
 21e:	01 34       	cpi	r16, 0x41	; 65
 220:	19 f0       	breq	.+6      	; 0x228 <action+0x38>
 222:	02 34       	cpi	r16, 0x42	; 66
 224:	21 f4       	brne	.+8      	; 0x22e <action+0x3e>
 226:	02 c0       	rjmp	.+4      	; 0x22c <action+0x3c>
	{
		case 'A':
			knockDownTheClapperboards(side);
 228:	9b df       	rcall	.-202    	; 0x160 <knockDownTheClapperboards>
 22a:	01 c0       	rjmp	.+2      	; 0x22e <action+0x3e>
				break;
				
		case 'B':
			colectThePopcorn(side);
 22c:	51 df       	rcall	.-350    	; 0xd0 <colectThePopcorn>
				break;
	}
 22e:	2a 96       	adiw	r28, 0x0a	; 10
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	08 95       	ret

00000244 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	0b b6       	in	r0, 0x3b	; 59
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
 26e:	50 91 ed 00 	lds	r21, 0x00ED
 272:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 274:	ad ee       	ldi	r26, 0xED	; 237
 276:	b0 e0       	ldi	r27, 0x00	; 0
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 278:	ee ee       	ldi	r30, 0xEE	; 238
 27a:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 27c:	89 2f       	mov	r24, r25
 27e:	82 95       	swap	r24
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	8c 93       	st	X, r24
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 284:	80 81       	ld	r24, Z
 286:	85 ff       	sbrs	r24, 5
 288:	5e c0       	rjmp	.+188    	; 0x346 <__vector_18+0x102>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	80 93 ef 00 	sts	0x00EF, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
 290:	ee ee       	ldi	r30, 0xEE	; 238
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8f 7d       	andi	r24, 0xDF	; 223
 298:	80 83       	st	Z, r24
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
			
			for(unsigned char i = 0; i < 8; i++)
				rxBuffer[rxWrIndex].data[i] = CANMSG;
 29e:	ca ef       	ldi	r28, 0xFA	; 250
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	a3 e0       	ldi	r26, 0x03	; 3
 2a4:	b1 e0       	ldi	r27, 0x01	; 1
 2a6:	20 91 02 01 	lds	r18, 0x0102
 2aa:	48 81       	ld	r20, Y
 2ac:	82 2f       	mov	r24, r18
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	9c 01       	movw	r18, r24
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	28 0f       	add	r18, r24
 2c4:	39 1f       	adc	r19, r25
 2c6:	26 0f       	add	r18, r22
 2c8:	37 1f       	adc	r19, r23
 2ca:	fd 01       	movw	r30, r26
 2cc:	e2 0f       	add	r30, r18
 2ce:	f3 1f       	adc	r31, r19
 2d0:	40 83       	st	Z, r20
 2d2:	6f 5f       	subi	r22, 0xFF	; 255
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
			
			for(unsigned char i = 0; i < 8; i++)
 2d6:	68 30       	cpi	r22, 0x08	; 8
 2d8:	71 05       	cpc	r23, r1
 2da:	29 f7       	brne	.-54     	; 0x2a6 <__vector_18+0x62>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);
						
			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
 2dc:	40 91 02 01 	lds	r20, 0x0102
 2e0:	80 91 f2 00 	lds	r24, 0x00F2
 2e4:	20 91 f3 00 	lds	r18, 0x00F3
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	82 95       	swap	r24
 2f8:	86 95       	lsr	r24
 2fa:	87 70       	andi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	28 2b       	or	r18, r24
 300:	39 2b       	or	r19, r25
 302:	84 2f       	mov	r24, r20
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	e8 0f       	add	r30, r24
 31a:	f9 1f       	adc	r31, r25
 31c:	e5 5f       	subi	r30, 0xF5	; 245
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	31 83       	std	Z+1, r19	; 0x01
 322:	20 83       	st	Z, r18
		
			if(++rxWrIndex == RX_BUFFER_SIZE)
 324:	80 91 02 01 	lds	r24, 0x0102
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 02 01 	sts	0x0102, r24
 32e:	80 91 02 01 	lds	r24, 0x0102
 332:	82 33       	cpi	r24, 0x32	; 50
 334:	11 f4       	brne	.+4      	; 0x33a <__vector_18+0xf6>
				rxWrIndex = 0;
 336:	10 92 02 01 	sts	0x0102, r1
			
			rxCounter++;
 33a:	80 91 00 01 	lds	r24, 0x0100
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 00 01 	sts	0x0100, r24
 344:	0f c0       	rjmp	.+30     	; 0x364 <__vector_18+0x120>
			
			break;
		}
		
		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
 346:	80 81       	ld	r24, Z
 348:	86 ff       	sbrs	r24, 6
 34a:	08 c0       	rjmp	.+16     	; 0x35c <__vector_18+0x118>
		{
			CANCDMOB = 0; // disable mob
 34c:	10 92 ef 00 	sts	0x00EF, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
 350:	ee ee       	ldi	r30, 0xEE	; 238
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	8f 7b       	andi	r24, 0xBF	; 191
 358:	80 83       	st	Z, r24
 35a:	04 c0       	rjmp	.+8      	; 0x364 <__vector_18+0x120>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
 35c:	9f 5f       	subi	r25, 0xFF	; 255
 35e:	9f 30       	cpi	r25, 0x0F	; 15
 360:	09 f0       	breq	.+2      	; 0x364 <__vector_18+0x120>
 362:	8c cf       	rjmp	.-232    	; 0x27c <__vector_18+0x38>
			
			break;
		}
	}
		
	CANPAGE = tempPage;
 364:	50 93 ed 00 	sts	0x00ED, r21
	CANGIT = CANGIT; // jako, jako retardirano... Kada upisem 1, on resetuje flag? Najgluplje moguce resenje. Glupi ATMEL
 368:	ea ed       	ldi	r30, 0xDA	; 218
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 83       	st	Z, r24
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0b be       	out	0x3b, r0	; 59
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
 39a:	2f 92       	push	r2
 39c:	3f 92       	push	r3
 39e:	4f 92       	push	r4
 3a0:	5f 92       	push	r5
 3a2:	6f 92       	push	r6
 3a4:	7f 92       	push	r7
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
	unsigned char ch;
	unsigned char data;
	
	// Reset the CAN controller
	CANGCON = 0x01;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 d8 00 	sts	0x00D8, r24
 3c4:	20 e0       	ldi	r18, 0x00	; 0
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 3c6:	0f 2e       	mov	r0, r31
 3c8:	fd ee       	ldi	r31, 0xED	; 237
 3ca:	4f 2e       	mov	r4, r31
 3cc:	55 24       	eor	r5, r5
 3ce:	f0 2d       	mov	r31, r0
		
		CANSTMOB = 0;
 3d0:	0f 2e       	mov	r0, r31
 3d2:	fe ee       	ldi	r31, 0xEE	; 238
 3d4:	6f 2e       	mov	r6, r31
 3d6:	77 24       	eor	r7, r7
 3d8:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
 3da:	0f 2e       	mov	r0, r31
 3dc:	ff ee       	ldi	r31, 0xEF	; 239
 3de:	8f 2e       	mov	r8, r31
 3e0:	99 24       	eor	r9, r9
 3e2:	f0 2d       	mov	r31, r0
		
		CANIDT1 = 0;
 3e4:	0f 2e       	mov	r0, r31
 3e6:	f3 ef       	ldi	r31, 0xF3	; 243
 3e8:	af 2e       	mov	r10, r31
 3ea:	bb 24       	eor	r11, r11
 3ec:	f0 2d       	mov	r31, r0
		CANIDT2 = 0;
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f2 ef       	ldi	r31, 0xF2	; 242
 3f2:	cf 2e       	mov	r12, r31
 3f4:	dd 24       	eor	r13, r13
 3f6:	f0 2d       	mov	r31, r0
		CANIDT3 = 0;
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f1 ef       	ldi	r31, 0xF1	; 241
 3fc:	ef 2e       	mov	r14, r31
 3fe:	ff 24       	eor	r15, r15
 400:	f0 2d       	mov	r31, r0
		CANIDT4 = 0;
 402:	00 ef       	ldi	r16, 0xF0	; 240
 404:	10 e0       	ldi	r17, 0x00	; 0
		CANIDM1 = 0;
 406:	67 ef       	ldi	r22, 0xF7	; 247
 408:	70 e0       	ldi	r23, 0x00	; 0
		CANIDM2 = 0;
 40a:	46 ef       	ldi	r20, 0xF6	; 246
 40c:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM3 = 0;
 40e:	c5 ef       	ldi	r28, 0xF5	; 245
 410:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM4 = 0;
 412:	0f 2e       	mov	r0, r31
 414:	f4 ef       	ldi	r31, 0xF4	; 244
 416:	2f 2e       	mov	r2, r31
 418:	33 24       	eor	r3, r3
 41a:	f0 2d       	mov	r31, r0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 41c:	ea ef       	ldi	r30, 0xFA	; 250
 41e:	f0 e0       	ldi	r31, 0x00	; 0
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 420:	82 2f       	mov	r24, r18
 422:	82 95       	swap	r24
 424:	80 7f       	andi	r24, 0xF0	; 240
 426:	d2 01       	movw	r26, r4
 428:	8c 93       	st	X, r24
		
		CANSTMOB = 0;
 42a:	d3 01       	movw	r26, r6
 42c:	1c 92       	st	X, r1
		CANCDMOB = 0;
 42e:	d4 01       	movw	r26, r8
 430:	1c 92       	st	X, r1
		
		CANIDT1 = 0;
 432:	d5 01       	movw	r26, r10
 434:	1c 92       	st	X, r1
		CANIDT2 = 0;
 436:	d6 01       	movw	r26, r12
 438:	1c 92       	st	X, r1
		CANIDT3 = 0;
 43a:	d7 01       	movw	r26, r14
 43c:	1c 92       	st	X, r1
		CANIDT4 = 0;
 43e:	d8 01       	movw	r26, r16
 440:	1c 92       	st	X, r1
		CANIDM1 = 0;
 442:	db 01       	movw	r26, r22
 444:	1c 92       	st	X, r1
		CANIDM2 = 0;
 446:	da 01       	movw	r26, r20
 448:	1c 92       	st	X, r1
		CANIDM3 = 0;
 44a:	18 82       	st	Y, r1
		CANIDM4 = 0;
 44c:	d1 01       	movw	r26, r2
 44e:	1c 92       	st	X, r1
 450:	80 e0       	ldi	r24, 0x00	; 0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 452:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	88 30       	cpi	r24, 0x08	; 8
 458:	e1 f7       	brne	.-8      	; 0x452 <CAN_Init+0xb8>
	
	// Reset the CAN controller
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	2f 30       	cpi	r18, 0x0F	; 15
 45e:	01 f7       	brne	.-64     	; 0x420 <CAN_Init+0x86>
			CANMSG = 0; 
	}
	
	
	// Enable the CAN controller
	CANGCON = 0x02;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 93 d8 00 	sts	0x00D8, r24
	
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
 46c:	8a e0       	ldi	r24, 0x0A	; 10
 46e:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
 472:	8e e6       	ldi	r24, 0x6E	; 110
 474:	80 93 e4 00 	sts	0x00E4, r24
	
	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
 478:	10 92 e5 00 	sts	0x00E5, r1
	
	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
 47c:	80 eb       	ldi	r24, 0xB0	; 176
 47e:	80 93 db 00 	sts	0x00DB, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
 482:	8f e7       	ldi	r24, 0x7F	; 127
 484:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 de 00 	sts	0x00DE, r24

	//sei();
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	7f 90       	pop	r7
 4a8:	6f 90       	pop	r6
 4aa:	5f 90       	pop	r5
 4ac:	4f 90       	pop	r4
 4ae:	3f 90       	pop	r3
 4b0:	2f 90       	pop	r2
 4b2:	08 95       	ret

000004b4 <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
 4b4:	dc 01       	movw	r26, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	
	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
 4b6:	80 91 00 01 	lds	r24, 0x0100
 4ba:	88 23       	and	r24, r24
 4bc:	e1 f3       	breq	.-8      	; 0x4b6 <CAN_read+0x2>
	cli();
 4be:	f8 94       	cli
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	50 e0       	ldi	r21, 0x00	; 0
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	71 e0       	ldi	r23, 0x01	; 1
 4c8:	20 91 01 01 	lds	r18, 0x0101
 4cc:	82 2f       	mov	r24, r18
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	9c 01       	movw	r18, r24
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	28 0f       	add	r18, r24
 4e4:	39 1f       	adc	r19, r25
 4e6:	24 0f       	add	r18, r20
 4e8:	35 1f       	adc	r19, r21
 4ea:	fb 01       	movw	r30, r22
 4ec:	e2 0f       	add	r30, r18
 4ee:	f3 1f       	adc	r31, r19
 4f0:	80 81       	ld	r24, Z
 4f2:	fd 01       	movw	r30, r26
 4f4:	e4 0f       	add	r30, r20
 4f6:	f5 1f       	adc	r31, r21
 4f8:	80 83       	st	Z, r24
 4fa:	4f 5f       	subi	r20, 0xFF	; 255
 4fc:	5f 4f       	sbci	r21, 0xFF	; 255
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
 4fe:	48 30       	cpi	r20, 0x08	; 8
 500:	51 05       	cpc	r21, r1
 502:	11 f7       	brne	.-60     	; 0x4c8 <CAN_read+0x14>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
	
	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
 504:	20 91 01 01 	lds	r18, 0x0101
 508:	82 2f       	mov	r24, r18
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fc 01       	movw	r30, r24
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	e8 0f       	add	r30, r24
 520:	f9 1f       	adc	r31, r25
 522:	e5 5f       	subi	r30, 0xF5	; 245
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	80 81       	ld	r24, Z
 528:	91 81       	ldd	r25, Z+1	; 0x01
 52a:	19 96       	adiw	r26, 0x09	; 9
 52c:	9c 93       	st	X, r25
 52e:	8e 93       	st	-X, r24
 530:	18 97       	sbiw	r26, 0x08	; 8
	
	if(++rxRdIndex == RX_BUFFER_SIZE)
 532:	80 91 01 01 	lds	r24, 0x0101
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 01 01 	sts	0x0101, r24
 53c:	80 91 01 01 	lds	r24, 0x0101
 540:	82 33       	cpi	r24, 0x32	; 50
 542:	11 f4       	brne	.+4      	; 0x548 <CAN_read+0x94>
		rxRdIndex = 0;
 544:	10 92 01 01 	sts	0x0101, r1
	
	
	rxCounter--;
 548:	80 91 00 01 	lds	r24, 0x0100
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	80 93 00 01 	sts	0x0100, r24
	sei();
 552:	78 94       	sei
}
 554:	08 95       	ret

00000556 <AX_UART_Init>:

void AX_UART_Init(void)
{
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
 556:	ed e2       	ldi	r30, 0x2D	; 45
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	8c 7f       	andi	r24, 0xFC	; 252
 55e:	80 83       	st	Z, r24
	//PORTE = 0;
	UCSR0A = 0;
 560:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 564:	88 e1       	ldi	r24, 0x18	; 24
 566:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	80 93 c2 00 	sts	0x00C2, r24
	
	UBRR0H = 0;
 570:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 5;
 574:	85 e0       	ldi	r24, 0x05	; 5
 576:	80 93 c4 00 	sts	0x00C4, r24
 57a:	28 ee       	ldi	r18, 0xE8	; 232
 57c:	33 e0       	ldi	r19, 0x03	; 3
 57e:	44 e1       	ldi	r20, 0x14	; 20
 580:	51 e0       	ldi	r21, 0x01	; 1
 582:	ca 01       	movw	r24, r20
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <AX_UART_Init+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58c:	d1 f7       	brne	.-12     	; 0x582 <AX_UART_Init+0x2c>
	
	_delay_ms(100);
}
 58e:	08 95       	ret

00000590 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
 590:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 592:	e0 ec       	ldi	r30, 0xC0	; 192
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	85 ff       	sbrs	r24, 5
 59a:	fd cf       	rjmp	.-6      	; 0x596 <AX_SendChar+0x6>
	UDR0 = data;	
 59c:	90 93 c6 00 	sts	0x00C6, r25
}
 5a0:	08 95       	ret

000005a2 <AX_StopTransmitter>:
	status[5] = AX_ReadChar();
}

void AX_StopTransmitter(void)
{
	while( !(UCSR0A & (1<<TXC0)) );
 5a2:	e0 ec       	ldi	r30, 0xC0	; 192
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	86 ff       	sbrs	r24, 6
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <AX_StopTransmitter+0x4>
	UCSR0B &= 0xF7;
 5ac:	e1 ec       	ldi	r30, 0xC1	; 193
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	87 7f       	andi	r24, 0xF7	; 247
 5b4:	80 83       	st	Z, r24
	UCSR0A |= 0x40;
 5b6:	e0 ec       	ldi	r30, 0xC0	; 192
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	80 64       	ori	r24, 0x40	; 64
 5be:	80 83       	st	Z, r24
}
 5c0:	08 95       	ret

000005c2 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
	UCSR0B |= 0x08;
 5c2:	e1 ec       	ldi	r30, 0xC1	; 193
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 60       	ori	r24, 0x08	; 8
 5ca:	80 83       	st	Z, r24
}
 5cc:	08 95       	ret

000005ce <AX_StopReceiver>:

void AX_StopReceiver(void)
{
	UCSR0B &= 0xEF;
 5ce:	e1 ec       	ldi	r30, 0xC1	; 193
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	8f 7e       	andi	r24, 0xEF	; 239
 5d6:	80 83       	st	Z, r24
}
 5d8:	08 95       	ret

000005da <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
	UCSR0B |= 0x10;
 5da:	e1 ec       	ldi	r30, 0xC1	; 193
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	80 61       	ori	r24, 0x10	; 16
 5e2:	80 83       	st	Z, r24
}
 5e4:	08 95       	ret

000005e6 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
 5e6:	6f 92       	push	r6
 5e8:	7f 92       	push	r7
 5ea:	8f 92       	push	r8
 5ec:	9f 92       	push	r9
 5ee:	af 92       	push	r10
 5f0:	bf 92       	push	r11
 5f2:	cf 92       	push	r12
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	5b 01       	movw	r10, r22
 600:	94 2e       	mov	r9, r20
 602:	62 2e       	mov	r6, r18
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;
	
	angle = (unsigned int)(1023 *((double)angle/300.0));
 604:	a0 e0       	ldi	r26, 0x00	; 0
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	bc 01       	movw	r22, r24
 60a:	cd 01       	movw	r24, r26
 60c:	1b d1       	rcall	.+566    	; 0x844 <__floatunsisf>
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	46 e9       	ldi	r20, 0x96	; 150
 614:	53 e4       	ldi	r21, 0x43	; 67
 616:	82 d0       	rcall	.+260    	; 0x71c <__divsf3>
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 ec       	ldi	r19, 0xC0	; 192
 61c:	4f e7       	ldi	r20, 0x7F	; 127
 61e:	54 e4       	ldi	r21, 0x44	; 68
 620:	9f d1       	rcall	.+830    	; 0x960 <__mulsf3>
 622:	e4 d0       	rcall	.+456    	; 0x7ec <__fixunssfsi>
 624:	6b 01       	movw	r12, r22
 626:	7c 01       	movw	r14, r24
	
	angle_H = (unsigned char)(angle >> 8);
	angle_L = (unsigned char)(angle & 0x00FF);
	
	speed |= (direction << 10);
 628:	19 2d       	mov	r17, r9
 62a:	11 0f       	add	r17, r17
 62c:	11 0f       	add	r17, r17
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	0a 29       	or	r16, r10
 632:	1b 29       	or	r17, r11
	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
	
	AX_StopReceiver();
 634:	cc df       	rcall	.-104    	; 0x5ce <AX_StopReceiver>
	
	AX_SendChar(START);
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	ab df       	rcall	.-170    	; 0x590 <AX_SendChar>
	AX_SendChar(START);
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	a9 df       	rcall	.-174    	; 0x590 <AX_SendChar>
	AX_SendChar(id);
 63e:	86 2d       	mov	r24, r6
 640:	a7 df       	rcall	.-178    	; 0x590 <AX_SendChar>
	AX_SendChar(LENGTH);
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	a5 df       	rcall	.-182    	; 0x590 <AX_SendChar>
	AX_SendChar(INSTR);
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	a3 df       	rcall	.-186    	; 0x590 <AX_SendChar>
	AX_SendChar(ADDRESS);
 64a:	8e e1       	ldi	r24, 0x1E	; 30
 64c:	a1 df       	rcall	.-190    	; 0x590 <AX_SendChar>
	AX_SendChar(angle_L);
 64e:	8c 2d       	mov	r24, r12
 650:	9f df       	rcall	.-194    	; 0x590 <AX_SendChar>
	AX_SendChar(angle_H);
 652:	8d 2d       	mov	r24, r13
 654:	9d df       	rcall	.-198    	; 0x590 <AX_SendChar>
	AX_SendChar(speed_L);
 656:	80 2f       	mov	r24, r16
 658:	9b df       	rcall	.-202    	; 0x590 <AX_SendChar>
	AX_SendChar(speed_H);
 65a:	81 2f       	mov	r24, r17
 65c:	99 df       	rcall	.-206    	; 0x590 <AX_SendChar>
	AX_SendChar(checksum);
 65e:	26 2d       	mov	r18, r6
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	28 5d       	subi	r18, 0xD8	; 216
 664:	3f 4f       	sbci	r19, 0xFF	; 255
 666:	2c 0d       	add	r18, r12
 668:	31 1d       	adc	r19, r1
 66a:	2d 0d       	add	r18, r13
 66c:	31 1d       	adc	r19, r1
 66e:	20 0f       	add	r18, r16
 670:	31 1d       	adc	r19, r1
 672:	21 0f       	add	r18, r17
 674:	31 1d       	adc	r19, r1
 676:	82 2f       	mov	r24, r18
 678:	80 95       	com	r24
 67a:	8a df       	rcall	.-236    	; 0x590 <AX_SendChar>
	
	AX_StopTransmitter();
 67c:	92 df       	rcall	.-220    	; 0x5a2 <AX_StopTransmitter>
	AX_ReleaseReceiver();
 67e:	ad df       	rcall	.-166    	; 0x5da <AX_ReleaseReceiver>
 680:	24 ef       	ldi	r18, 0xF4	; 244
 682:	31 e0       	ldi	r19, 0x01	; 1
 684:	44 e1       	ldi	r20, 0x14	; 20
 686:	51 e0       	ldi	r21, 0x01	; 1
 688:	ca 01       	movw	r24, r20
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <AX_SetAngle+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 68e:	21 50       	subi	r18, 0x01	; 1
 690:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 692:	d1 f7       	brne	.-12     	; 0x688 <AX_SetAngle+0xa2>
	
	_delay_ms(50);
	
	AX_ReleaseTransmitter();
 694:	96 df       	rcall	.-212    	; 0x5c2 <AX_ReleaseTransmitter>
}
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	bf 90       	pop	r11
 6a4:	af 90       	pop	r10
 6a6:	9f 90       	pop	r9
 6a8:	8f 90       	pop	r8
 6aa:	7f 90       	pop	r7
 6ac:	6f 90       	pop	r6
 6ae:	08 95       	ret

000006b0 <main>:
#include "control.h"
#include "uart.h"
#include "can.h"

int main(void)
{
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	df 93       	push	r29
 6ba:	cf 93       	push	r28
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	2a 97       	sbiw	r28, 0x0a	; 10
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
	DDRE |= (1 << PINE4);
 6cc:	ed e2       	ldi	r30, 0x2D	; 45
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	80 61       	ori	r24, 0x10	; 16
 6d4:	80 83       	st	Z, r24
	PORTE &= (~(1 << PINE4));
 6d6:	ee e2       	ldi	r30, 0x2E	; 46
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	8f 7e       	andi	r24, 0xEF	; 239
 6de:	80 83       	st	Z, r24
	AX_UART_Init();
 6e0:	3a df       	rcall	.-396    	; 0x556 <AX_UART_Init>
	CAN_Init();
 6e2:	5b de       	rcall	.-842    	; 0x39a <CAN_Init>
 6e4:	20 e1       	ldi	r18, 0x10	; 16
 6e6:	37 e2       	ldi	r19, 0x27	; 39
 6e8:	44 e1       	ldi	r20, 0x14	; 20
 6ea:	51 e0       	ldi	r21, 0x01	; 1
 6ec:	ca 01       	movw	r24, r20
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6f6:	d1 f7       	brne	.-12     	; 0x6ec <main+0x3c>

	canMsg message;
	
    while(1)
    {
       CAN_read(&message);
 6f8:	7e 01       	movw	r14, r28
 6fa:	08 94       	sec
 6fc:	e1 1c       	adc	r14, r1
 6fe:	f1 1c       	adc	r15, r1
 700:	c7 01       	movw	r24, r14
 702:	d8 de       	rcall	.-592    	; 0x4b4 <CAN_read>
	   
	   action(message);  
 704:	09 81       	ldd	r16, Y+1	; 0x01
 706:	1a 81       	ldd	r17, Y+2	; 0x02
 708:	2b 81       	ldd	r18, Y+3	; 0x03
 70a:	3c 81       	ldd	r19, Y+4	; 0x04
 70c:	4d 81       	ldd	r20, Y+5	; 0x05
 70e:	5e 81       	ldd	r21, Y+6	; 0x06
 710:	6f 81       	ldd	r22, Y+7	; 0x07
 712:	78 85       	ldd	r23, Y+8	; 0x08
 714:	89 85       	ldd	r24, Y+9	; 0x09
 716:	9a 85       	ldd	r25, Y+10	; 0x0a
 718:	6b dd       	rcall	.-1322   	; 0x1f0 <action>
 71a:	f2 cf       	rjmp	.-28     	; 0x700 <main+0x50>

0000071c <__divsf3>:
 71c:	0c d0       	rcall	.+24     	; 0x736 <__divsf3x>
 71e:	e6 c0       	rjmp	.+460    	; 0x8ec <__fp_round>
 720:	de d0       	rcall	.+444    	; 0x8de <__fp_pscB>
 722:	40 f0       	brcs	.+16     	; 0x734 <__divsf3+0x18>
 724:	d5 d0       	rcall	.+426    	; 0x8d0 <__fp_pscA>
 726:	30 f0       	brcs	.+12     	; 0x734 <__divsf3+0x18>
 728:	21 f4       	brne	.+8      	; 0x732 <__divsf3+0x16>
 72a:	5f 3f       	cpi	r21, 0xFF	; 255
 72c:	19 f0       	breq	.+6      	; 0x734 <__divsf3+0x18>
 72e:	c7 c0       	rjmp	.+398    	; 0x8be <__fp_inf>
 730:	51 11       	cpse	r21, r1
 732:	10 c1       	rjmp	.+544    	; 0x954 <__fp_szero>
 734:	ca c0       	rjmp	.+404    	; 0x8ca <__fp_nan>

00000736 <__divsf3x>:
 736:	eb d0       	rcall	.+470    	; 0x90e <__fp_split3>
 738:	98 f3       	brcs	.-26     	; 0x720 <__divsf3+0x4>

0000073a <__divsf3_pse>:
 73a:	99 23       	and	r25, r25
 73c:	c9 f3       	breq	.-14     	; 0x730 <__divsf3+0x14>
 73e:	55 23       	and	r21, r21
 740:	b1 f3       	breq	.-20     	; 0x72e <__divsf3+0x12>
 742:	95 1b       	sub	r25, r21
 744:	55 0b       	sbc	r21, r21
 746:	bb 27       	eor	r27, r27
 748:	aa 27       	eor	r26, r26
 74a:	62 17       	cp	r22, r18
 74c:	73 07       	cpc	r23, r19
 74e:	84 07       	cpc	r24, r20
 750:	38 f0       	brcs	.+14     	; 0x760 <__divsf3_pse+0x26>
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	22 0f       	add	r18, r18
 758:	33 1f       	adc	r19, r19
 75a:	44 1f       	adc	r20, r20
 75c:	aa 1f       	adc	r26, r26
 75e:	a9 f3       	breq	.-22     	; 0x74a <__divsf3_pse+0x10>
 760:	33 d0       	rcall	.+102    	; 0x7c8 <__divsf3_pse+0x8e>
 762:	0e 2e       	mov	r0, r30
 764:	3a f0       	brmi	.+14     	; 0x774 <__divsf3_pse+0x3a>
 766:	e0 e8       	ldi	r30, 0x80	; 128
 768:	30 d0       	rcall	.+96     	; 0x7ca <__divsf3_pse+0x90>
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	50 40       	sbci	r21, 0x00	; 0
 76e:	e6 95       	lsr	r30
 770:	00 1c       	adc	r0, r0
 772:	ca f7       	brpl	.-14     	; 0x766 <__divsf3_pse+0x2c>
 774:	29 d0       	rcall	.+82     	; 0x7c8 <__divsf3_pse+0x8e>
 776:	fe 2f       	mov	r31, r30
 778:	27 d0       	rcall	.+78     	; 0x7c8 <__divsf3_pse+0x8e>
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	bb 1f       	adc	r27, r27
 782:	26 17       	cp	r18, r22
 784:	37 07       	cpc	r19, r23
 786:	48 07       	cpc	r20, r24
 788:	ab 07       	cpc	r26, r27
 78a:	b0 e8       	ldi	r27, 0x80	; 128
 78c:	09 f0       	breq	.+2      	; 0x790 <__divsf3_pse+0x56>
 78e:	bb 0b       	sbc	r27, r27
 790:	80 2d       	mov	r24, r0
 792:	bf 01       	movw	r22, r30
 794:	ff 27       	eor	r31, r31
 796:	93 58       	subi	r25, 0x83	; 131
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	2a f0       	brmi	.+10     	; 0x7a6 <__divsf3_pse+0x6c>
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	51 05       	cpc	r21, r1
 7a0:	68 f0       	brcs	.+26     	; 0x7bc <__divsf3_pse+0x82>
 7a2:	8d c0       	rjmp	.+282    	; 0x8be <__fp_inf>
 7a4:	d7 c0       	rjmp	.+430    	; 0x954 <__fp_szero>
 7a6:	5f 3f       	cpi	r21, 0xFF	; 255
 7a8:	ec f3       	brlt	.-6      	; 0x7a4 <__divsf3_pse+0x6a>
 7aa:	98 3e       	cpi	r25, 0xE8	; 232
 7ac:	dc f3       	brlt	.-10     	; 0x7a4 <__divsf3_pse+0x6a>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	f7 95       	ror	r31
 7b8:	9f 5f       	subi	r25, 0xFF	; 255
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <__divsf3_pse+0x74>
 7bc:	88 0f       	add	r24, r24
 7be:	91 1d       	adc	r25, r1
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret
 7c8:	e1 e0       	ldi	r30, 0x01	; 1
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	bb 1f       	adc	r27, r27
 7d2:	62 17       	cp	r22, r18
 7d4:	73 07       	cpc	r23, r19
 7d6:	84 07       	cpc	r24, r20
 7d8:	ba 07       	cpc	r27, r26
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__divsf3_pse+0xaa>
 7dc:	62 1b       	sub	r22, r18
 7de:	73 0b       	sbc	r23, r19
 7e0:	84 0b       	sbc	r24, r20
 7e2:	ba 0b       	sbc	r27, r26
 7e4:	ee 1f       	adc	r30, r30
 7e6:	88 f7       	brcc	.-30     	; 0x7ca <__divsf3_pse+0x90>
 7e8:	e0 95       	com	r30
 7ea:	08 95       	ret

000007ec <__fixunssfsi>:
 7ec:	98 d0       	rcall	.+304    	; 0x91e <__fp_splitA>
 7ee:	88 f0       	brcs	.+34     	; 0x812 <__fixunssfsi+0x26>
 7f0:	9f 57       	subi	r25, 0x7F	; 127
 7f2:	90 f0       	brcs	.+36     	; 0x818 <__fixunssfsi+0x2c>
 7f4:	b9 2f       	mov	r27, r25
 7f6:	99 27       	eor	r25, r25
 7f8:	b7 51       	subi	r27, 0x17	; 23
 7fa:	a0 f0       	brcs	.+40     	; 0x824 <__fixunssfsi+0x38>
 7fc:	d1 f0       	breq	.+52     	; 0x832 <__fixunssfsi+0x46>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	1a f0       	brmi	.+6      	; 0x80e <__fixunssfsi+0x22>
 808:	ba 95       	dec	r27
 80a:	c9 f7       	brne	.-14     	; 0x7fe <__fixunssfsi+0x12>
 80c:	12 c0       	rjmp	.+36     	; 0x832 <__fixunssfsi+0x46>
 80e:	b1 30       	cpi	r27, 0x01	; 1
 810:	81 f0       	breq	.+32     	; 0x832 <__fixunssfsi+0x46>
 812:	9f d0       	rcall	.+318    	; 0x952 <__fp_zero>
 814:	b1 e0       	ldi	r27, 0x01	; 1
 816:	08 95       	ret
 818:	9c c0       	rjmp	.+312    	; 0x952 <__fp_zero>
 81a:	67 2f       	mov	r22, r23
 81c:	78 2f       	mov	r23, r24
 81e:	88 27       	eor	r24, r24
 820:	b8 5f       	subi	r27, 0xF8	; 248
 822:	39 f0       	breq	.+14     	; 0x832 <__fixunssfsi+0x46>
 824:	b9 3f       	cpi	r27, 0xF9	; 249
 826:	cc f3       	brlt	.-14     	; 0x81a <__fixunssfsi+0x2e>
 828:	86 95       	lsr	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b3 95       	inc	r27
 830:	d9 f7       	brne	.-10     	; 0x828 <__fixunssfsi+0x3c>
 832:	3e f4       	brtc	.+14     	; 0x842 <__fixunssfsi+0x56>
 834:	90 95       	com	r25
 836:	80 95       	com	r24
 838:	70 95       	com	r23
 83a:	61 95       	neg	r22
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	08 95       	ret

00000844 <__floatunsisf>:
 844:	e8 94       	clt
 846:	09 c0       	rjmp	.+18     	; 0x85a <__floatsisf+0x12>

00000848 <__floatsisf>:
 848:	97 fb       	bst	r25, 7
 84a:	3e f4       	brtc	.+14     	; 0x85a <__floatsisf+0x12>
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	99 23       	and	r25, r25
 85c:	a9 f0       	breq	.+42     	; 0x888 <__floatsisf+0x40>
 85e:	f9 2f       	mov	r31, r25
 860:	96 e9       	ldi	r25, 0x96	; 150
 862:	bb 27       	eor	r27, r27
 864:	93 95       	inc	r25
 866:	f6 95       	lsr	r31
 868:	87 95       	ror	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f1 11       	cpse	r31, r1
 872:	f8 cf       	rjmp	.-16     	; 0x864 <__floatsisf+0x1c>
 874:	fa f4       	brpl	.+62     	; 0x8b4 <__floatsisf+0x6c>
 876:	bb 0f       	add	r27, r27
 878:	11 f4       	brne	.+4      	; 0x87e <__floatsisf+0x36>
 87a:	60 ff       	sbrs	r22, 0
 87c:	1b c0       	rjmp	.+54     	; 0x8b4 <__floatsisf+0x6c>
 87e:	6f 5f       	subi	r22, 0xFF	; 255
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	16 c0       	rjmp	.+44     	; 0x8b4 <__floatsisf+0x6c>
 888:	88 23       	and	r24, r24
 88a:	11 f0       	breq	.+4      	; 0x890 <__floatsisf+0x48>
 88c:	96 e9       	ldi	r25, 0x96	; 150
 88e:	11 c0       	rjmp	.+34     	; 0x8b2 <__floatsisf+0x6a>
 890:	77 23       	and	r23, r23
 892:	21 f0       	breq	.+8      	; 0x89c <__floatsisf+0x54>
 894:	9e e8       	ldi	r25, 0x8E	; 142
 896:	87 2f       	mov	r24, r23
 898:	76 2f       	mov	r23, r22
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <__floatsisf+0x5e>
 89c:	66 23       	and	r22, r22
 89e:	71 f0       	breq	.+28     	; 0x8bc <__floatsisf+0x74>
 8a0:	96 e8       	ldi	r25, 0x86	; 134
 8a2:	86 2f       	mov	r24, r22
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	2a f0       	brmi	.+10     	; 0x8b4 <__floatsisf+0x6c>
 8aa:	9a 95       	dec	r25
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	da f7       	brpl	.-10     	; 0x8aa <__floatsisf+0x62>
 8b4:	88 0f       	add	r24, r24
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	97 f9       	bld	r25, 7
 8bc:	08 95       	ret

000008be <__fp_inf>:
 8be:	97 f9       	bld	r25, 7
 8c0:	9f 67       	ori	r25, 0x7F	; 127
 8c2:	80 e8       	ldi	r24, 0x80	; 128
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	08 95       	ret

000008ca <__fp_nan>:
 8ca:	9f ef       	ldi	r25, 0xFF	; 255
 8cc:	80 ec       	ldi	r24, 0xC0	; 192
 8ce:	08 95       	ret

000008d0 <__fp_pscA>:
 8d0:	00 24       	eor	r0, r0
 8d2:	0a 94       	dec	r0
 8d4:	16 16       	cp	r1, r22
 8d6:	17 06       	cpc	r1, r23
 8d8:	18 06       	cpc	r1, r24
 8da:	09 06       	cpc	r0, r25
 8dc:	08 95       	ret

000008de <__fp_pscB>:
 8de:	00 24       	eor	r0, r0
 8e0:	0a 94       	dec	r0
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	14 06       	cpc	r1, r20
 8e8:	05 06       	cpc	r0, r21
 8ea:	08 95       	ret

000008ec <__fp_round>:
 8ec:	09 2e       	mov	r0, r25
 8ee:	03 94       	inc	r0
 8f0:	00 0c       	add	r0, r0
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__fp_round+0xc>
 8f4:	88 23       	and	r24, r24
 8f6:	52 f0       	brmi	.+20     	; 0x90c <__fp_round+0x20>
 8f8:	bb 0f       	add	r27, r27
 8fa:	40 f4       	brcc	.+16     	; 0x90c <__fp_round+0x20>
 8fc:	bf 2b       	or	r27, r31
 8fe:	11 f4       	brne	.+4      	; 0x904 <__fp_round+0x18>
 900:	60 ff       	sbrs	r22, 0
 902:	04 c0       	rjmp	.+8      	; 0x90c <__fp_round+0x20>
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__fp_split3>:
 90e:	57 fd       	sbrc	r21, 7
 910:	90 58       	subi	r25, 0x80	; 128
 912:	44 0f       	add	r20, r20
 914:	55 1f       	adc	r21, r21
 916:	59 f0       	breq	.+22     	; 0x92e <__fp_splitA+0x10>
 918:	5f 3f       	cpi	r21, 0xFF	; 255
 91a:	71 f0       	breq	.+28     	; 0x938 <__fp_splitA+0x1a>
 91c:	47 95       	ror	r20

0000091e <__fp_splitA>:
 91e:	88 0f       	add	r24, r24
 920:	97 fb       	bst	r25, 7
 922:	99 1f       	adc	r25, r25
 924:	61 f0       	breq	.+24     	; 0x93e <__fp_splitA+0x20>
 926:	9f 3f       	cpi	r25, 0xFF	; 255
 928:	79 f0       	breq	.+30     	; 0x948 <__fp_splitA+0x2a>
 92a:	87 95       	ror	r24
 92c:	08 95       	ret
 92e:	12 16       	cp	r1, r18
 930:	13 06       	cpc	r1, r19
 932:	14 06       	cpc	r1, r20
 934:	55 1f       	adc	r21, r21
 936:	f2 cf       	rjmp	.-28     	; 0x91c <__fp_split3+0xe>
 938:	46 95       	lsr	r20
 93a:	f1 df       	rcall	.-30     	; 0x91e <__fp_splitA>
 93c:	08 c0       	rjmp	.+16     	; 0x94e <__fp_splitA+0x30>
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	18 06       	cpc	r1, r24
 944:	99 1f       	adc	r25, r25
 946:	f1 cf       	rjmp	.-30     	; 0x92a <__fp_splitA+0xc>
 948:	86 95       	lsr	r24
 94a:	71 05       	cpc	r23, r1
 94c:	61 05       	cpc	r22, r1
 94e:	08 94       	sec
 950:	08 95       	ret

00000952 <__fp_zero>:
 952:	e8 94       	clt

00000954 <__fp_szero>:
 954:	bb 27       	eor	r27, r27
 956:	66 27       	eor	r22, r22
 958:	77 27       	eor	r23, r23
 95a:	cb 01       	movw	r24, r22
 95c:	97 f9       	bld	r25, 7
 95e:	08 95       	ret

00000960 <__mulsf3>:
 960:	0b d0       	rcall	.+22     	; 0x978 <__mulsf3x>
 962:	c4 cf       	rjmp	.-120    	; 0x8ec <__fp_round>
 964:	b5 df       	rcall	.-150    	; 0x8d0 <__fp_pscA>
 966:	28 f0       	brcs	.+10     	; 0x972 <__mulsf3+0x12>
 968:	ba df       	rcall	.-140    	; 0x8de <__fp_pscB>
 96a:	18 f0       	brcs	.+6      	; 0x972 <__mulsf3+0x12>
 96c:	95 23       	and	r25, r21
 96e:	09 f0       	breq	.+2      	; 0x972 <__mulsf3+0x12>
 970:	a6 cf       	rjmp	.-180    	; 0x8be <__fp_inf>
 972:	ab cf       	rjmp	.-170    	; 0x8ca <__fp_nan>
 974:	11 24       	eor	r1, r1
 976:	ee cf       	rjmp	.-36     	; 0x954 <__fp_szero>

00000978 <__mulsf3x>:
 978:	ca df       	rcall	.-108    	; 0x90e <__fp_split3>
 97a:	a0 f3       	brcs	.-24     	; 0x964 <__mulsf3+0x4>

0000097c <__mulsf3_pse>:
 97c:	95 9f       	mul	r25, r21
 97e:	d1 f3       	breq	.-12     	; 0x974 <__mulsf3+0x14>
 980:	95 0f       	add	r25, r21
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	55 1f       	adc	r21, r21
 986:	62 9f       	mul	r22, r18
 988:	f0 01       	movw	r30, r0
 98a:	72 9f       	mul	r23, r18
 98c:	bb 27       	eor	r27, r27
 98e:	f0 0d       	add	r31, r0
 990:	b1 1d       	adc	r27, r1
 992:	63 9f       	mul	r22, r19
 994:	aa 27       	eor	r26, r26
 996:	f0 0d       	add	r31, r0
 998:	b1 1d       	adc	r27, r1
 99a:	aa 1f       	adc	r26, r26
 99c:	64 9f       	mul	r22, r20
 99e:	66 27       	eor	r22, r22
 9a0:	b0 0d       	add	r27, r0
 9a2:	a1 1d       	adc	r26, r1
 9a4:	66 1f       	adc	r22, r22
 9a6:	82 9f       	mul	r24, r18
 9a8:	22 27       	eor	r18, r18
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	62 1f       	adc	r22, r18
 9b0:	73 9f       	mul	r23, r19
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	62 1f       	adc	r22, r18
 9b8:	83 9f       	mul	r24, r19
 9ba:	a0 0d       	add	r26, r0
 9bc:	61 1d       	adc	r22, r1
 9be:	22 1f       	adc	r18, r18
 9c0:	74 9f       	mul	r23, r20
 9c2:	33 27       	eor	r19, r19
 9c4:	a0 0d       	add	r26, r0
 9c6:	61 1d       	adc	r22, r1
 9c8:	23 1f       	adc	r18, r19
 9ca:	84 9f       	mul	r24, r20
 9cc:	60 0d       	add	r22, r0
 9ce:	21 1d       	adc	r18, r1
 9d0:	82 2f       	mov	r24, r18
 9d2:	76 2f       	mov	r23, r22
 9d4:	6a 2f       	mov	r22, r26
 9d6:	11 24       	eor	r1, r1
 9d8:	9f 57       	subi	r25, 0x7F	; 127
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	8a f0       	brmi	.+34     	; 0xa00 <__mulsf3_pse+0x84>
 9de:	e1 f0       	breq	.+56     	; 0xa18 <__mulsf3_pse+0x9c>
 9e0:	88 23       	and	r24, r24
 9e2:	4a f0       	brmi	.+18     	; 0x9f6 <__mulsf3_pse+0x7a>
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	bb 1f       	adc	r27, r27
 9ea:	66 1f       	adc	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	91 50       	subi	r25, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__mulsf3_pse+0x64>
 9f6:	9e 3f       	cpi	r25, 0xFE	; 254
 9f8:	51 05       	cpc	r21, r1
 9fa:	70 f0       	brcs	.+28     	; 0xa18 <__mulsf3_pse+0x9c>
 9fc:	60 cf       	rjmp	.-320    	; 0x8be <__fp_inf>
 9fe:	aa cf       	rjmp	.-172    	; 0x954 <__fp_szero>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	ec f3       	brlt	.-6      	; 0x9fe <__mulsf3_pse+0x82>
 a04:	98 3e       	cpi	r25, 0xE8	; 232
 a06:	dc f3       	brlt	.-10     	; 0x9fe <__mulsf3_pse+0x82>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b7 95       	ror	r27
 a10:	f7 95       	ror	r31
 a12:	e7 95       	ror	r30
 a14:	9f 5f       	subi	r25, 0xFF	; 255
 a16:	c1 f7       	brne	.-16     	; 0xa08 <__mulsf3_pse+0x8c>
 a18:	fe 2b       	or	r31, r30
 a1a:	88 0f       	add	r24, r24
 a1c:	91 1d       	adc	r25, r1
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
