
Robot_Actuator_Voja_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001f7  00800100  00800100  00000bce  2**0
                  ALLOC
  2 .debug_aranges 00000130  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000209  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c0c  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004ef  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000dfd  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000034d  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000487  00000000  00000000  0000332d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
					  Ako ima vraca 1, u suprotnom vraca 0
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
	TCCR0A = (1 << WGM01) | (1 << CS02);
	TIMSK0 |= (1 << OCIE0A);
	OCR0A = 43;
	
	SREG |= 0x80;
}
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c1       	rjmp	.+670    	; 0x2e8 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e5       	ldi	r30, 0x5A	; 90
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	12 e0       	ldi	r17, 0x02	; 2
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 3f       	cpi	r26, 0xF7	; 247
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	87 d3       	rcall	.+1806   	; 0x7da <main>
  cc:	44 c5       	rjmp	.+2696   	; 0xb56 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <rightDiafram>:
	}
}//END OF colectThePopcorn

void rightDiafram(unsigned char state)
{
	DDRE |= (1 << PINE4);
  d0:	ed e2       	ldi	r30, 0x2D	; 45
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	90 61       	ori	r25, 0x10	; 16
  d8:	90 83       	st	Z, r25
	
	if (state == ACTIVATE)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	31 f4       	brne	.+12     	; 0xea <rightDiafram+0x1a>
	{
		PORTE |= (1 << PINE4);
  de:	ee e2       	ldi	r30, 0x2E	; 46
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret
	}else
	{
		PORTE &= ~(1 << PINE4);
  ea:	ee e2       	ldi	r30, 0x2E	; 46
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <leftDiafram>:
	
}//END OF valveOnOff

void leftDiafram(unsigned char state)
{
	DDRE |= (1 << PINE5);
  f6:	ed e2       	ldi	r30, 0x2D	; 45
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	90 62       	ori	r25, 0x20	; 32
  fe:	90 83       	st	Z, r25
	
	if (state == ACTIVATE)
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	31 f4       	brne	.+12     	; 0x110 <leftDiafram+0x1a>
	{
		PORTE |= (1 << PINE5);
 104:	ee e2       	ldi	r30, 0x2E	; 46
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret
	}else
	{
		PORTE &= ~(1 << PINE5);
 110:	ee e2       	ldi	r30, 0x2E	; 46
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <liftMove>:
	
}//END OF valveTwoOnOff

void liftMove(unsigned char state)
{
	DDRF |= (1 << PINF7);//CS1
 11c:	e0 e3       	ldi	r30, 0x30	; 48
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	90 68       	ori	r25, 0x80	; 128
 124:	90 83       	st	Z, r25
	DDRF |= (1 << PINF6);//INA1
 126:	90 81       	ld	r25, Z
 128:	90 64       	ori	r25, 0x40	; 64
 12a:	90 83       	st	Z, r25
	DDRF |= (0 << PINF5);//INB1
 12c:	90 81       	ld	r25, Z
 12e:	90 83       	st	Z, r25
	DDRE |= (1 << PINE3);//PWM1
 130:	ed e2       	ldi	r30, 0x2D	; 45
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	98 60       	ori	r25, 0x08	; 8
 138:	90 83       	st	Z, r25
	
	if (state == ACTIVATE)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	31 f4       	brne	.+12     	; 0x14a <liftMove+0x2e>
	{
		PORTE |= (1 << PINE3);
 13e:	ee e2       	ldi	r30, 0x2E	; 46
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
 148:	08 95       	ret
	} 
	else
	{
		PORTE &= ~(1 << PINE3);
 14a:	ee e2       	ldi	r30, 0x2E	; 46
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	87 7f       	andi	r24, 0xF7	; 247
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <colectThePopcorn>:
	}
}//END OF knockDownTheClapperboards

void colectThePopcorn(unsigned char side)
{
	if(side == 1)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	19 f5       	brne	.+70     	; 0x1a0 <colectThePopcorn+0x4a>
	{
		AX_SetAngle(60, 180, 1, AX_SERVO2);//otvori ruku za uzimanje kokica sa desne strane
 15a:	8c e3       	ldi	r24, 0x3C	; 60
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	64 eb       	ldi	r22, 0xB4	; 180
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	22 e0       	ldi	r18, 0x02	; 2
 166:	d4 d2       	rcall	.+1448   	; 0x710 <AX_SetAngle>
 168:	20 e1       	ldi	r18, 0x10	; 16
 16a:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	44 e1       	ldi	r20, 0x14	; 20
 16e:	51 e0       	ldi	r21, 0x01	; 1
 170:	ca 01       	movw	r24, r20
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <colectThePopcorn+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	d1 f7       	brne	.-12     	; 0x170 <colectThePopcorn+0x1a>
		_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO2);//zatvori ruku za uzimanje kokica sa desne strane
 17c:	80 ea       	ldi	r24, 0xA0	; 160
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	64 eb       	ldi	r22, 0xB4	; 180
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	22 e0       	ldi	r18, 0x02	; 2
 188:	c3 d2       	rcall	.+1414   	; 0x710 <AX_SetAngle>
 18a:	20 e1       	ldi	r18, 0x10	; 16
 18c:	37 e2       	ldi	r19, 0x27	; 39
 18e:	44 e1       	ldi	r20, 0x14	; 20
 190:	51 e0       	ldi	r21, 0x01	; 1
 192:	ca 01       	movw	r24, r20
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <colectThePopcorn+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19c:	d1 f7       	brne	.-12     	; 0x192 <colectThePopcorn+0x3c>
 19e:	08 95       	ret
		_delay_ms(1000);	
		
	}else
	{
		AX_SetAngle(60, 180, 1, AX_SERVO4);//otvori ruku za uzimanje kokica sa leve strane
 1a0:	8c e3       	ldi	r24, 0x3C	; 60
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	64 eb       	ldi	r22, 0xB4	; 180
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	24 e0       	ldi	r18, 0x04	; 4
 1ac:	b1 d2       	rcall	.+1378   	; 0x710 <AX_SetAngle>
 1ae:	20 e1       	ldi	r18, 0x10	; 16
 1b0:	37 e2       	ldi	r19, 0x27	; 39
 1b2:	44 e1       	ldi	r20, 0x14	; 20
 1b4:	51 e0       	ldi	r21, 0x01	; 1
 1b6:	ca 01       	movw	r24, r20
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <colectThePopcorn+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c0:	d1 f7       	brne	.-12     	; 0x1b6 <colectThePopcorn+0x60>
		_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO4);//zatvori ruku za uzimanje kokica sa leve strane
 1c2:	80 ea       	ldi	r24, 0xA0	; 160
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	64 eb       	ldi	r22, 0xB4	; 180
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	24 e0       	ldi	r18, 0x04	; 4
 1ce:	a0 d2       	rcall	.+1344   	; 0x710 <AX_SetAngle>
 1d0:	20 e1       	ldi	r18, 0x10	; 16
 1d2:	37 e2       	ldi	r19, 0x27	; 39
 1d4:	44 e1       	ldi	r20, 0x14	; 20
 1d6:	51 e0       	ldi	r21, 0x01	; 1
 1d8:	ca 01       	movw	r24, r20
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <colectThePopcorn+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	d1 f7       	brne	.-12     	; 0x1d8 <colectThePopcorn+0x82>
 1e4:	08 95       	ret

000001e6 <knockDownTheClapperboards>:
#define ACTIVATE	1
#define DEACTIVATE	-1

void knockDownTheClapperboards(unsigned char side)
{
	if(side == 1)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	19 f5       	brne	.+70     	; 0x230 <knockDownTheClapperboards+0x4a>
	{
		AX_SetAngle(60, 180, 1, AX_SERVO1);//izbaci udaraljku sa desne strane
 1ea:	8c e3       	ldi	r24, 0x3C	; 60
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	64 eb       	ldi	r22, 0xB4	; 180
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	8c d2       	rcall	.+1304   	; 0x710 <AX_SetAngle>
 1f8:	20 e1       	ldi	r18, 0x10	; 16
 1fa:	37 e2       	ldi	r19, 0x27	; 39
 1fc:	44 e1       	ldi	r20, 0x14	; 20
 1fe:	51 e0       	ldi	r21, 0x01	; 1
 200:	ca 01       	movw	r24, r20
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <knockDownTheClapperboards+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	21 50       	subi	r18, 0x01	; 1
 208:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20a:	d1 f7       	brne	.-12     	; 0x200 <knockDownTheClapperboards+0x1a>
			_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO1);//uvuce udaraljku sa desne strane
 20c:	80 ea       	ldi	r24, 0xA0	; 160
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	64 eb       	ldi	r22, 0xB4	; 180
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	7b d2       	rcall	.+1270   	; 0x710 <AX_SetAngle>
 21a:	20 e1       	ldi	r18, 0x10	; 16
 21c:	37 e2       	ldi	r19, 0x27	; 39
 21e:	44 e1       	ldi	r20, 0x14	; 20
 220:	51 e0       	ldi	r21, 0x01	; 1
 222:	ca 01       	movw	r24, r20
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <knockDownTheClapperboards+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22c:	d1 f7       	brne	.-12     	; 0x222 <knockDownTheClapperboards+0x3c>
 22e:	08 95       	ret
			_delay_ms(1000);
		
	}else
	{
		AX_SetAngle(160, 180, 1, AX_SERVO3);//izbaci udaraljku sa leve strane
 230:	80 ea       	ldi	r24, 0xA0	; 160
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	64 eb       	ldi	r22, 0xB4	; 180
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	23 e0       	ldi	r18, 0x03	; 3
 23c:	69 d2       	rcall	.+1234   	; 0x710 <AX_SetAngle>
 23e:	20 e1       	ldi	r18, 0x10	; 16
 240:	37 e2       	ldi	r19, 0x27	; 39
 242:	44 e1       	ldi	r20, 0x14	; 20
 244:	51 e0       	ldi	r21, 0x01	; 1
 246:	ca 01       	movw	r24, r20
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <knockDownTheClapperboards+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d1 f7       	brne	.-12     	; 0x246 <knockDownTheClapperboards+0x60>
			_delay_ms(1000);
		AX_SetAngle(60, 180, 1, AX_SERVO3);//uvuce udaraljku sa leve strane
 252:	8c e3       	ldi	r24, 0x3C	; 60
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	64 eb       	ldi	r22, 0xB4	; 180
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	23 e0       	ldi	r18, 0x03	; 3
 25e:	58 d2       	rcall	.+1200   	; 0x710 <AX_SetAngle>
 260:	20 e1       	ldi	r18, 0x10	; 16
 262:	37 e2       	ldi	r19, 0x27	; 39
 264:	44 e1       	ldi	r20, 0x14	; 20
 266:	51 e0       	ldi	r21, 0x01	; 1
 268:	ca 01       	movw	r24, r20
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <knockDownTheClapperboards+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 272:	d1 f7       	brne	.-12     	; 0x268 <knockDownTheClapperboards+0x82>
 274:	08 95       	ret

00000276 <action>:
	}
		
}//END OF liftOnOff

void action(canMsg msg)
{
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	df 93       	push	r29
 27c:	cf 93       	push	r28
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2a 97       	sbiw	r28, 0x0a	; 10
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	09 83       	std	Y+1, r16	; 0x01
 290:	1a 83       	std	Y+2, r17	; 0x02
 292:	2b 83       	std	Y+3, r18	; 0x03
 294:	3c 83       	std	Y+4, r19	; 0x04
 296:	4d 83       	std	Y+5, r20	; 0x05
 298:	5e 83       	std	Y+6, r21	; 0x06
 29a:	6f 83       	std	Y+7, r22	; 0x07
 29c:	78 87       	std	Y+8, r23	; 0x08
 29e:	89 87       	std	Y+9, r24	; 0x09
 2a0:	9a 87       	std	Y+10, r25	; 0x0a
 2a2:	81 2f       	mov	r24, r17
	unsigned char command = msg.data[0];
	unsigned char side, state;
	
	switch(command)
 2a4:	03 34       	cpi	r16, 0x43	; 67
 2a6:	81 f0       	breq	.+32     	; 0x2c8 <action+0x52>
 2a8:	04 34       	cpi	r16, 0x44	; 68
 2aa:	28 f4       	brcc	.+10     	; 0x2b6 <action+0x40>
 2ac:	01 34       	cpi	r16, 0x41	; 65
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <action+0x4a>
 2b0:	02 34       	cpi	r16, 0x42	; 66
 2b2:	79 f4       	brne	.+30     	; 0x2d2 <action+0x5c>
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <action+0x4e>
 2b6:	04 34       	cpi	r16, 0x44	; 68
 2b8:	49 f0       	breq	.+18     	; 0x2cc <action+0x56>
 2ba:	05 34       	cpi	r16, 0x45	; 69
 2bc:	51 f4       	brne	.+20     	; 0x2d2 <action+0x5c>
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <action+0x5a>
	{
		case 'A':
			side = msg.data[1];
			knockDownTheClapperboards(side);
 2c0:	92 df       	rcall	.-220    	; 0x1e6 <knockDownTheClapperboards>
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <action+0x5c>
				break;
				
		case 'B':
			side = msg.data[1];
			colectThePopcorn(side);
 2c4:	48 df       	rcall	.-368    	; 0x156 <colectThePopcorn>
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <action+0x5c>
				break;
				
		case 'C':
			state = msg.data[1];
			leftDiafram(state);
 2c8:	16 df       	rcall	.-468    	; 0xf6 <leftDiafram>
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <action+0x5c>
				break;
				
		case 'D':
			state = msg.data[1];
			rightDiafram(state);
 2cc:	01 df       	rcall	.-510    	; 0xd0 <rightDiafram>
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <action+0x5c>
				break;
				
		case 'E':
			state = msg.data[1];
			liftMove(state);
 2d0:	25 df       	rcall	.-438    	; 0x11c <liftMove>
				break;
	}
 2d2:	2a 96       	adiw	r28, 0x0a	; 10
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	0b b6       	in	r0, 0x3b	; 59
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
 312:	50 91 ed 00 	lds	r21, 0x00ED
 316:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 318:	ad ee       	ldi	r26, 0xED	; 237
 31a:	b0 e0       	ldi	r27, 0x00	; 0
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 31c:	ee ee       	ldi	r30, 0xEE	; 238
 31e:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 320:	89 2f       	mov	r24, r25
 322:	82 95       	swap	r24
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	8c 93       	st	X, r24
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 328:	80 81       	ld	r24, Z
 32a:	85 ff       	sbrs	r24, 5
 32c:	5e c0       	rjmp	.+188    	; 0x3ea <__vector_18+0x102>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	80 93 ef 00 	sts	0x00EF, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
 334:	ee ee       	ldi	r30, 0xEE	; 238
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	8f 7d       	andi	r24, 0xDF	; 223
 33c:	80 83       	st	Z, r24
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
			
			for(unsigned char i = 0; i < 8; i++)
				rxBuffer[rxWrIndex].data[i] = CANMSG;
 342:	ca ef       	ldi	r28, 0xFA	; 250
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	a3 e0       	ldi	r26, 0x03	; 3
 348:	b1 e0       	ldi	r27, 0x01	; 1
 34a:	20 91 02 01 	lds	r18, 0x0102
 34e:	48 81       	ld	r20, Y
 350:	82 2f       	mov	r24, r18
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	9c 01       	movw	r18, r24
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	28 0f       	add	r18, r24
 368:	39 1f       	adc	r19, r25
 36a:	26 0f       	add	r18, r22
 36c:	37 1f       	adc	r19, r23
 36e:	fd 01       	movw	r30, r26
 370:	e2 0f       	add	r30, r18
 372:	f3 1f       	adc	r31, r19
 374:	40 83       	st	Z, r20
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
			
			for(unsigned char i = 0; i < 8; i++)
 37a:	68 30       	cpi	r22, 0x08	; 8
 37c:	71 05       	cpc	r23, r1
 37e:	29 f7       	brne	.-54     	; 0x34a <__vector_18+0x62>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);
						
			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
 380:	40 91 02 01 	lds	r20, 0x0102
 384:	80 91 f2 00 	lds	r24, 0x00F2
 388:	20 91 f3 00 	lds	r18, 0x00F3
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	82 95       	swap	r24
 39c:	86 95       	lsr	r24
 39e:	87 70       	andi	r24, 0x07	; 7
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	28 2b       	or	r18, r24
 3a4:	39 2b       	or	r19, r25
 3a6:	84 2f       	mov	r24, r20
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fc 01       	movw	r30, r24
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	e8 0f       	add	r30, r24
 3be:	f9 1f       	adc	r31, r25
 3c0:	e5 5f       	subi	r30, 0xF5	; 245
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	31 83       	std	Z+1, r19	; 0x01
 3c6:	20 83       	st	Z, r18
		
			if(++rxWrIndex == RX_BUFFER_SIZE)
 3c8:	80 91 02 01 	lds	r24, 0x0102
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 02 01 	sts	0x0102, r24
 3d2:	80 91 02 01 	lds	r24, 0x0102
 3d6:	82 33       	cpi	r24, 0x32	; 50
 3d8:	11 f4       	brne	.+4      	; 0x3de <__vector_18+0xf6>
				rxWrIndex = 0;
 3da:	10 92 02 01 	sts	0x0102, r1
			
			rxCounter++;
 3de:	80 91 00 01 	lds	r24, 0x0100
 3e2:	8f 5f       	subi	r24, 0xFF	; 255
 3e4:	80 93 00 01 	sts	0x0100, r24
 3e8:	0f c0       	rjmp	.+30     	; 0x408 <__vector_18+0x120>
			
			break;
		}
		
		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
 3ea:	80 81       	ld	r24, Z
 3ec:	86 ff       	sbrs	r24, 6
 3ee:	08 c0       	rjmp	.+16     	; 0x400 <__vector_18+0x118>
		{
			CANCDMOB = 0; // disable mob
 3f0:	10 92 ef 00 	sts	0x00EF, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
 3f4:	ee ee       	ldi	r30, 0xEE	; 238
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 7b       	andi	r24, 0xBF	; 191
 3fc:	80 83       	st	Z, r24
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__vector_18+0x120>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	9f 30       	cpi	r25, 0x0F	; 15
 404:	09 f0       	breq	.+2      	; 0x408 <__vector_18+0x120>
 406:	8c cf       	rjmp	.-232    	; 0x320 <__vector_18+0x38>
			
			break;
		}
	}
		
	CANPAGE = tempPage;
 408:	50 93 ed 00 	sts	0x00ED, r21
	CANGIT = CANGIT; // jako, jako retardirano... Kada upisem 1, on resetuje flag? Najgluplje moguce resenje. Glupi ATMEL
 40c:	ea ed       	ldi	r30, 0xDA	; 218
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	80 83       	st	Z, r24
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0b be       	out	0x3b, r0	; 59
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
 43e:	2f 92       	push	r2
 440:	3f 92       	push	r3
 442:	4f 92       	push	r4
 444:	5f 92       	push	r5
 446:	6f 92       	push	r6
 448:	7f 92       	push	r7
 44a:	8f 92       	push	r8
 44c:	9f 92       	push	r9
 44e:	af 92       	push	r10
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
	unsigned char ch;
	unsigned char data;
	
	// Reset the CAN controller
	CANGCON = 0x01;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 d8 00 	sts	0x00D8, r24
 468:	20 e0       	ldi	r18, 0x00	; 0
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 46a:	0f 2e       	mov	r0, r31
 46c:	fd ee       	ldi	r31, 0xED	; 237
 46e:	4f 2e       	mov	r4, r31
 470:	55 24       	eor	r5, r5
 472:	f0 2d       	mov	r31, r0
		
		CANSTMOB = 0;
 474:	0f 2e       	mov	r0, r31
 476:	fe ee       	ldi	r31, 0xEE	; 238
 478:	6f 2e       	mov	r6, r31
 47a:	77 24       	eor	r7, r7
 47c:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
 47e:	0f 2e       	mov	r0, r31
 480:	ff ee       	ldi	r31, 0xEF	; 239
 482:	8f 2e       	mov	r8, r31
 484:	99 24       	eor	r9, r9
 486:	f0 2d       	mov	r31, r0
		
		CANIDT1 = 0;
 488:	0f 2e       	mov	r0, r31
 48a:	f3 ef       	ldi	r31, 0xF3	; 243
 48c:	af 2e       	mov	r10, r31
 48e:	bb 24       	eor	r11, r11
 490:	f0 2d       	mov	r31, r0
		CANIDT2 = 0;
 492:	0f 2e       	mov	r0, r31
 494:	f2 ef       	ldi	r31, 0xF2	; 242
 496:	cf 2e       	mov	r12, r31
 498:	dd 24       	eor	r13, r13
 49a:	f0 2d       	mov	r31, r0
		CANIDT3 = 0;
 49c:	0f 2e       	mov	r0, r31
 49e:	f1 ef       	ldi	r31, 0xF1	; 241
 4a0:	ef 2e       	mov	r14, r31
 4a2:	ff 24       	eor	r15, r15
 4a4:	f0 2d       	mov	r31, r0
		CANIDT4 = 0;
 4a6:	00 ef       	ldi	r16, 0xF0	; 240
 4a8:	10 e0       	ldi	r17, 0x00	; 0
		CANIDM1 = 0;
 4aa:	67 ef       	ldi	r22, 0xF7	; 247
 4ac:	70 e0       	ldi	r23, 0x00	; 0
		CANIDM2 = 0;
 4ae:	46 ef       	ldi	r20, 0xF6	; 246
 4b0:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM3 = 0;
 4b2:	c5 ef       	ldi	r28, 0xF5	; 245
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM4 = 0;
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f4 ef       	ldi	r31, 0xF4	; 244
 4ba:	2f 2e       	mov	r2, r31
 4bc:	33 24       	eor	r3, r3
 4be:	f0 2d       	mov	r31, r0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 4c0:	ea ef       	ldi	r30, 0xFA	; 250
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 4c4:	82 2f       	mov	r24, r18
 4c6:	82 95       	swap	r24
 4c8:	80 7f       	andi	r24, 0xF0	; 240
 4ca:	d2 01       	movw	r26, r4
 4cc:	8c 93       	st	X, r24
		
		CANSTMOB = 0;
 4ce:	d3 01       	movw	r26, r6
 4d0:	1c 92       	st	X, r1
		CANCDMOB = 0;
 4d2:	d4 01       	movw	r26, r8
 4d4:	1c 92       	st	X, r1
		
		CANIDT1 = 0;
 4d6:	d5 01       	movw	r26, r10
 4d8:	1c 92       	st	X, r1
		CANIDT2 = 0;
 4da:	d6 01       	movw	r26, r12
 4dc:	1c 92       	st	X, r1
		CANIDT3 = 0;
 4de:	d7 01       	movw	r26, r14
 4e0:	1c 92       	st	X, r1
		CANIDT4 = 0;
 4e2:	d8 01       	movw	r26, r16
 4e4:	1c 92       	st	X, r1
		CANIDM1 = 0;
 4e6:	db 01       	movw	r26, r22
 4e8:	1c 92       	st	X, r1
		CANIDM2 = 0;
 4ea:	da 01       	movw	r26, r20
 4ec:	1c 92       	st	X, r1
		CANIDM3 = 0;
 4ee:	18 82       	st	Y, r1
		CANIDM4 = 0;
 4f0:	d1 01       	movw	r26, r2
 4f2:	1c 92       	st	X, r1
 4f4:	80 e0       	ldi	r24, 0x00	; 0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 4f6:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
 4f8:	8f 5f       	subi	r24, 0xFF	; 255
 4fa:	88 30       	cpi	r24, 0x08	; 8
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <CAN_Init+0xb8>
	
	// Reset the CAN controller
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
 4fe:	2f 5f       	subi	r18, 0xFF	; 255
 500:	2f 30       	cpi	r18, 0x0F	; 15
 502:	01 f7       	brne	.-64     	; 0x4c4 <CAN_Init+0x86>
			CANMSG = 0; 
	}
	
	
	// Enable the CAN controller
	CANGCON = 0x02;
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	80 93 d8 00 	sts	0x00D8, r24
	
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
 516:	8e e6       	ldi	r24, 0x6E	; 110
 518:	80 93 e4 00 	sts	0x00E4, r24
	
	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
 51c:	10 92 e5 00 	sts	0x00E5, r1
	
	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
 520:	80 eb       	ldi	r24, 0xB0	; 176
 522:	80 93 db 00 	sts	0x00DB, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
 526:	8f e7       	ldi	r24, 0x7F	; 127
 528:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	80 93 de 00 	sts	0x00DE, r24

	//sei();
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	cf 90       	pop	r12
 542:	bf 90       	pop	r11
 544:	af 90       	pop	r10
 546:	9f 90       	pop	r9
 548:	8f 90       	pop	r8
 54a:	7f 90       	pop	r7
 54c:	6f 90       	pop	r6
 54e:	5f 90       	pop	r5
 550:	4f 90       	pop	r4
 552:	3f 90       	pop	r3
 554:	2f 90       	pop	r2
 556:	08 95       	ret

00000558 <CAN_InitRxMob>:
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
 558:	9c 01       	movw	r18, r24
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
 55a:	40 91 ed 00 	lds	r20, 0x00ED
	
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
 55e:	e9 ed       	ldi	r30, 0xD9	; 217
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	84 fd       	sbrc	r24, 4
 566:	fd cf       	rjmp	.-6      	; 0x562 <CAN_InitRxMob+0xa>
 568:	80 81       	ld	r24, Z
 56a:	83 fd       	sbrc	r24, 3
 56c:	fa cf       	rjmp	.-12     	; 0x562 <CAN_InitRxMob+0xa>
 56e:	90 e0       	ldi	r25, 0x00	; 0
	
	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 570:	ad ee       	ldi	r26, 0xED	; 237
 572:	b0 e0       	ldi	r27, 0x00	; 0
		
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
 574:	ef ee       	ldi	r30, 0xEF	; 239
 576:	f0 e0       	ldi	r31, 0x00	; 0
	
	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 578:	89 2f       	mov	r24, r25
 57a:	82 95       	swap	r24
 57c:	80 7f       	andi	r24, 0xF0	; 240
 57e:	8c 93       	st	X, r24
		
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
 580:	80 81       	ld	r24, Z
 582:	82 95       	swap	r24
 584:	86 95       	lsr	r24
 586:	86 95       	lsr	r24
 588:	83 70       	andi	r24, 0x03	; 3
 58a:	11 f5       	brne	.+68     	; 0x5d0 <CAN_InitRxMob+0x78>
			continue;	
		
		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
 58c:	ef ee       	ldi	r30, 0xEF	; 239
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	8f e0       	ldi	r24, 0x0F	; 15
 592:	80 83       	st	Z, r24
		
		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
 594:	c9 01       	movw	r24, r18
 596:	90 70       	andi	r25, 0x00	; 0
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2 = (ide & 0x00FF) << 5;
 5a8:	82 2f       	mov	r24, r18
 5aa:	82 95       	swap	r24
 5ac:	88 0f       	add	r24, r24
 5ae:	80 7e       	andi	r24, 0xE0	; 224
 5b0:	80 93 f2 00 	sts	0x00F2, r24
		
		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
 5b4:	80 ee       	ldi	r24, 0xE0	; 224
 5b6:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM1 = 0xFF;
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	80 93 f7 00 	sts	0x00F7, r24
		
		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
 5c0:	80 81       	ld	r24, Z
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	80 83       	st	Z, r24
		sei();
 5c6:	78 94       	sei
		CANPAGE = tempPage;
 5c8:	40 93 ed 00 	sts	0x00ED, r20
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	08 95       	ret
	
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
	
	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	9f 30       	cpi	r25, 0x0F	; 15
 5d4:	89 f6       	brne	.-94     	; 0x578 <CAN_InitRxMob+0x20>
		CANPAGE = tempPage;
		
		return 1;
	}
	
	CANPAGE = tempPage;
 5d6:	40 93 ed 00 	sts	0x00ED, r20
 5da:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 5dc:	08 95       	ret

000005de <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
 5de:	dc 01       	movw	r26, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	
	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
 5e0:	80 91 00 01 	lds	r24, 0x0100
 5e4:	88 23       	and	r24, r24
 5e6:	e1 f3       	breq	.-8      	; 0x5e0 <CAN_read+0x2>
	cli();
 5e8:	f8 94       	cli
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	50 e0       	ldi	r21, 0x00	; 0
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	71 e0       	ldi	r23, 0x01	; 1
 5f2:	20 91 01 01 	lds	r18, 0x0101
 5f6:	82 2f       	mov	r24, r18
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	9c 01       	movw	r18, r24
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	28 0f       	add	r18, r24
 60e:	39 1f       	adc	r19, r25
 610:	24 0f       	add	r18, r20
 612:	35 1f       	adc	r19, r21
 614:	fb 01       	movw	r30, r22
 616:	e2 0f       	add	r30, r18
 618:	f3 1f       	adc	r31, r19
 61a:	80 81       	ld	r24, Z
 61c:	fd 01       	movw	r30, r26
 61e:	e4 0f       	add	r30, r20
 620:	f5 1f       	adc	r31, r21
 622:	80 83       	st	Z, r24
 624:	4f 5f       	subi	r20, 0xFF	; 255
 626:	5f 4f       	sbci	r21, 0xFF	; 255
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
 628:	48 30       	cpi	r20, 0x08	; 8
 62a:	51 05       	cpc	r21, r1
 62c:	11 f7       	brne	.-60     	; 0x5f2 <CAN_read+0x14>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
	
	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
 62e:	20 91 01 01 	lds	r18, 0x0101
 632:	82 2f       	mov	r24, r18
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	fc 01       	movw	r30, r24
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	e8 0f       	add	r30, r24
 64a:	f9 1f       	adc	r31, r25
 64c:	e5 5f       	subi	r30, 0xF5	; 245
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	80 81       	ld	r24, Z
 652:	91 81       	ldd	r25, Z+1	; 0x01
 654:	19 96       	adiw	r26, 0x09	; 9
 656:	9c 93       	st	X, r25
 658:	8e 93       	st	-X, r24
 65a:	18 97       	sbiw	r26, 0x08	; 8
	
	if(++rxRdIndex == RX_BUFFER_SIZE)
 65c:	80 91 01 01 	lds	r24, 0x0101
 660:	8f 5f       	subi	r24, 0xFF	; 255
 662:	80 93 01 01 	sts	0x0101, r24
 666:	80 91 01 01 	lds	r24, 0x0101
 66a:	82 33       	cpi	r24, 0x32	; 50
 66c:	11 f4       	brne	.+4      	; 0x672 <CAN_read+0x94>
		rxRdIndex = 0;
 66e:	10 92 01 01 	sts	0x0101, r1
	
	
	rxCounter--;
 672:	80 91 00 01 	lds	r24, 0x0100
 676:	81 50       	subi	r24, 0x01	; 1
 678:	80 93 00 01 	sts	0x0100, r24
	sei();
 67c:	78 94       	sei
}
 67e:	08 95       	ret

00000680 <AX_UART_Init>:

void AX_UART_Init(void)
{
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
 680:	ed e2       	ldi	r30, 0x2D	; 45
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	8c 7f       	andi	r24, 0xFC	; 252
 688:	80 83       	st	Z, r24
	//PORTE = 0;
	UCSR0A = 0;
 68a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 68e:	88 e1       	ldi	r24, 0x18	; 24
 690:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 694:	86 e0       	ldi	r24, 0x06	; 6
 696:	80 93 c2 00 	sts	0x00C2, r24
	
	UBRR0H = 0;
 69a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 5;
 69e:	85 e0       	ldi	r24, 0x05	; 5
 6a0:	80 93 c4 00 	sts	0x00C4, r24
 6a4:	28 ee       	ldi	r18, 0xE8	; 232
 6a6:	33 e0       	ldi	r19, 0x03	; 3
 6a8:	44 e1       	ldi	r20, 0x14	; 20
 6aa:	51 e0       	ldi	r21, 0x01	; 1
 6ac:	ca 01       	movw	r24, r20
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <AX_UART_Init+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b6:	d1 f7       	brne	.-12     	; 0x6ac <AX_UART_Init+0x2c>
	
	_delay_ms(100);
}
 6b8:	08 95       	ret

000006ba <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
 6ba:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 6bc:	e0 ec       	ldi	r30, 0xC0	; 192
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	85 ff       	sbrs	r24, 5
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <AX_SendChar+0x6>
	UDR0 = data;	
 6c6:	90 93 c6 00 	sts	0x00C6, r25
}
 6ca:	08 95       	ret

000006cc <AX_StopTransmitter>:
	status[5] = AX_ReadChar();
}

void AX_StopTransmitter(void)
{
	while( !(UCSR0A & (1<<TXC0)) );
 6cc:	e0 ec       	ldi	r30, 0xC0	; 192
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	86 ff       	sbrs	r24, 6
 6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <AX_StopTransmitter+0x4>
	UCSR0B &= 0xF7;
 6d6:	e1 ec       	ldi	r30, 0xC1	; 193
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	87 7f       	andi	r24, 0xF7	; 247
 6de:	80 83       	st	Z, r24
	UCSR0A |= 0x40;
 6e0:	e0 ec       	ldi	r30, 0xC0	; 192
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	80 64       	ori	r24, 0x40	; 64
 6e8:	80 83       	st	Z, r24
}
 6ea:	08 95       	ret

000006ec <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
	UCSR0B |= 0x08;
 6ec:	e1 ec       	ldi	r30, 0xC1	; 193
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	88 60       	ori	r24, 0x08	; 8
 6f4:	80 83       	st	Z, r24
}
 6f6:	08 95       	ret

000006f8 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
	UCSR0B &= 0xEF;
 6f8:	e1 ec       	ldi	r30, 0xC1	; 193
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	8f 7e       	andi	r24, 0xEF	; 239
 700:	80 83       	st	Z, r24
}
 702:	08 95       	ret

00000704 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
	UCSR0B |= 0x10;
 704:	e1 ec       	ldi	r30, 0xC1	; 193
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	80 61       	ori	r24, 0x10	; 16
 70c:	80 83       	st	Z, r24
}
 70e:	08 95       	ret

00000710 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
 710:	6f 92       	push	r6
 712:	7f 92       	push	r7
 714:	8f 92       	push	r8
 716:	9f 92       	push	r9
 718:	af 92       	push	r10
 71a:	bf 92       	push	r11
 71c:	cf 92       	push	r12
 71e:	df 92       	push	r13
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	5b 01       	movw	r10, r22
 72a:	94 2e       	mov	r9, r20
 72c:	62 2e       	mov	r6, r18
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;
	
	angle = (unsigned int)(1023 *((double)angle/300.0));
 72e:	a0 e0       	ldi	r26, 0x00	; 0
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	bc 01       	movw	r22, r24
 734:	cd 01       	movw	r24, r26
 736:	1e d1       	rcall	.+572    	; 0x974 <__floatunsisf>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	46 e9       	ldi	r20, 0x96	; 150
 73e:	53 e4       	ldi	r21, 0x43	; 67
 740:	85 d0       	rcall	.+266    	; 0x84c <__divsf3>
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	30 ec       	ldi	r19, 0xC0	; 192
 746:	4f e7       	ldi	r20, 0x7F	; 127
 748:	54 e4       	ldi	r21, 0x44	; 68
 74a:	a2 d1       	rcall	.+836    	; 0xa90 <__mulsf3>
 74c:	e7 d0       	rcall	.+462    	; 0x91c <__fixunssfsi>
 74e:	6b 01       	movw	r12, r22
 750:	7c 01       	movw	r14, r24
	
	angle_H = (unsigned char)(angle >> 8);
	angle_L = (unsigned char)(angle & 0x00FF);
	
	speed |= (direction << 10);
 752:	19 2d       	mov	r17, r9
 754:	11 0f       	add	r17, r17
 756:	11 0f       	add	r17, r17
 758:	00 e0       	ldi	r16, 0x00	; 0
 75a:	0a 29       	or	r16, r10
 75c:	1b 29       	or	r17, r11
	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
	
	AX_StopReceiver();
 75e:	cc df       	rcall	.-104    	; 0x6f8 <AX_StopReceiver>
	
	AX_SendChar(START);
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	ab df       	rcall	.-170    	; 0x6ba <AX_SendChar>
	AX_SendChar(START);
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	a9 df       	rcall	.-174    	; 0x6ba <AX_SendChar>
	AX_SendChar(id);
 768:	86 2d       	mov	r24, r6
 76a:	a7 df       	rcall	.-178    	; 0x6ba <AX_SendChar>
	AX_SendChar(LENGTH);
 76c:	87 e0       	ldi	r24, 0x07	; 7
 76e:	a5 df       	rcall	.-182    	; 0x6ba <AX_SendChar>
	AX_SendChar(INSTR);
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	a3 df       	rcall	.-186    	; 0x6ba <AX_SendChar>
	AX_SendChar(ADDRESS);
 774:	8e e1       	ldi	r24, 0x1E	; 30
 776:	a1 df       	rcall	.-190    	; 0x6ba <AX_SendChar>
	AX_SendChar(angle_L);
 778:	8c 2d       	mov	r24, r12
 77a:	9f df       	rcall	.-194    	; 0x6ba <AX_SendChar>
	AX_SendChar(angle_H);
 77c:	8d 2d       	mov	r24, r13
 77e:	9d df       	rcall	.-198    	; 0x6ba <AX_SendChar>
	AX_SendChar(speed_L);
 780:	80 2f       	mov	r24, r16
 782:	9b df       	rcall	.-202    	; 0x6ba <AX_SendChar>
	AX_SendChar(speed_H);
 784:	81 2f       	mov	r24, r17
 786:	99 df       	rcall	.-206    	; 0x6ba <AX_SendChar>
	AX_SendChar(checksum);
 788:	26 2d       	mov	r18, r6
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	28 5d       	subi	r18, 0xD8	; 216
 78e:	3f 4f       	sbci	r19, 0xFF	; 255
 790:	2c 0d       	add	r18, r12
 792:	31 1d       	adc	r19, r1
 794:	2d 0d       	add	r18, r13
 796:	31 1d       	adc	r19, r1
 798:	20 0f       	add	r18, r16
 79a:	31 1d       	adc	r19, r1
 79c:	21 0f       	add	r18, r17
 79e:	31 1d       	adc	r19, r1
 7a0:	82 2f       	mov	r24, r18
 7a2:	80 95       	com	r24
 7a4:	8a df       	rcall	.-236    	; 0x6ba <AX_SendChar>
	
	AX_StopTransmitter();
 7a6:	92 df       	rcall	.-220    	; 0x6cc <AX_StopTransmitter>
	AX_ReleaseReceiver();
 7a8:	ad df       	rcall	.-166    	; 0x704 <AX_ReleaseReceiver>
 7aa:	24 ef       	ldi	r18, 0xF4	; 244
 7ac:	31 e0       	ldi	r19, 0x01	; 1
 7ae:	44 e1       	ldi	r20, 0x14	; 20
 7b0:	51 e0       	ldi	r21, 0x01	; 1
 7b2:	ca 01       	movw	r24, r20
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <AX_SetAngle+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7b8:	21 50       	subi	r18, 0x01	; 1
 7ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7bc:	d1 f7       	brne	.-12     	; 0x7b2 <AX_SetAngle+0xa2>
	
	_delay_ms(50);
	
	AX_ReleaseTransmitter();
 7be:	96 df       	rcall	.-212    	; 0x6ec <AX_ReleaseTransmitter>
}
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	ff 90       	pop	r15
 7c6:	ef 90       	pop	r14
 7c8:	df 90       	pop	r13
 7ca:	cf 90       	pop	r12
 7cc:	bf 90       	pop	r11
 7ce:	af 90       	pop	r10
 7d0:	9f 90       	pop	r9
 7d2:	8f 90       	pop	r8
 7d4:	7f 90       	pop	r7
 7d6:	6f 90       	pop	r6
 7d8:	08 95       	ret

000007da <main>:
#include "control.h"
#include "uart.h"
#include "can.h"

int main(void)
{
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	2a 97       	sbiw	r28, 0x0a	; 10
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
	DDRE |= (1 << PINE4);
 7f6:	ed e2       	ldi	r30, 0x2D	; 45
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	80 61       	ori	r24, 0x10	; 16
 7fe:	80 83       	st	Z, r24
	PORTE &= (~(1 << PINE4));
 800:	ee e2       	ldi	r30, 0x2E	; 46
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	8f 7e       	andi	r24, 0xEF	; 239
 808:	80 83       	st	Z, r24
	AX_UART_Init();
 80a:	3a df       	rcall	.-396    	; 0x680 <AX_UART_Init>
	CAN_Init();
 80c:	18 de       	rcall	.-976    	; 0x43e <CAN_Init>
	CAN_InitRxMob(LIFT_IDE);
 80e:	84 ed       	ldi	r24, 0xD4	; 212
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	a2 de       	rcall	.-700    	; 0x558 <CAN_InitRxMob>
 814:	20 e1       	ldi	r18, 0x10	; 16
 816:	37 e2       	ldi	r19, 0x27	; 39
 818:	44 e1       	ldi	r20, 0x14	; 20
 81a:	51 e0       	ldi	r21, 0x01	; 1
 81c:	ca 01       	movw	r24, r20
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 822:	21 50       	subi	r18, 0x01	; 1
 824:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 826:	d1 f7       	brne	.-12     	; 0x81c <main+0x42>

	canMsg message;
	
    while(1)
    {
       CAN_read(&message);
 828:	7e 01       	movw	r14, r28
 82a:	08 94       	sec
 82c:	e1 1c       	adc	r14, r1
 82e:	f1 1c       	adc	r15, r1
 830:	c7 01       	movw	r24, r14
 832:	d5 de       	rcall	.-598    	; 0x5de <CAN_read>
	   
	   action(message);  
 834:	09 81       	ldd	r16, Y+1	; 0x01
 836:	1a 81       	ldd	r17, Y+2	; 0x02
 838:	2b 81       	ldd	r18, Y+3	; 0x03
 83a:	3c 81       	ldd	r19, Y+4	; 0x04
 83c:	4d 81       	ldd	r20, Y+5	; 0x05
 83e:	5e 81       	ldd	r21, Y+6	; 0x06
 840:	6f 81       	ldd	r22, Y+7	; 0x07
 842:	78 85       	ldd	r23, Y+8	; 0x08
 844:	89 85       	ldd	r24, Y+9	; 0x09
 846:	9a 85       	ldd	r25, Y+10	; 0x0a
 848:	16 dd       	rcall	.-1492   	; 0x276 <action>
 84a:	f2 cf       	rjmp	.-28     	; 0x830 <main+0x56>

0000084c <__divsf3>:
 84c:	0c d0       	rcall	.+24     	; 0x866 <__divsf3x>
 84e:	e6 c0       	rjmp	.+460    	; 0xa1c <__fp_round>
 850:	de d0       	rcall	.+444    	; 0xa0e <__fp_pscB>
 852:	40 f0       	brcs	.+16     	; 0x864 <__divsf3+0x18>
 854:	d5 d0       	rcall	.+426    	; 0xa00 <__fp_pscA>
 856:	30 f0       	brcs	.+12     	; 0x864 <__divsf3+0x18>
 858:	21 f4       	brne	.+8      	; 0x862 <__divsf3+0x16>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	19 f0       	breq	.+6      	; 0x864 <__divsf3+0x18>
 85e:	c7 c0       	rjmp	.+398    	; 0x9ee <__fp_inf>
 860:	51 11       	cpse	r21, r1
 862:	10 c1       	rjmp	.+544    	; 0xa84 <__fp_szero>
 864:	ca c0       	rjmp	.+404    	; 0x9fa <__fp_nan>

00000866 <__divsf3x>:
 866:	eb d0       	rcall	.+470    	; 0xa3e <__fp_split3>
 868:	98 f3       	brcs	.-26     	; 0x850 <__divsf3+0x4>

0000086a <__divsf3_pse>:
 86a:	99 23       	and	r25, r25
 86c:	c9 f3       	breq	.-14     	; 0x860 <__divsf3+0x14>
 86e:	55 23       	and	r21, r21
 870:	b1 f3       	breq	.-20     	; 0x85e <__divsf3+0x12>
 872:	95 1b       	sub	r25, r21
 874:	55 0b       	sbc	r21, r21
 876:	bb 27       	eor	r27, r27
 878:	aa 27       	eor	r26, r26
 87a:	62 17       	cp	r22, r18
 87c:	73 07       	cpc	r23, r19
 87e:	84 07       	cpc	r24, r20
 880:	38 f0       	brcs	.+14     	; 0x890 <__divsf3_pse+0x26>
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	5f 4f       	sbci	r21, 0xFF	; 255
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	44 1f       	adc	r20, r20
 88c:	aa 1f       	adc	r26, r26
 88e:	a9 f3       	breq	.-22     	; 0x87a <__divsf3_pse+0x10>
 890:	33 d0       	rcall	.+102    	; 0x8f8 <__divsf3_pse+0x8e>
 892:	0e 2e       	mov	r0, r30
 894:	3a f0       	brmi	.+14     	; 0x8a4 <__divsf3_pse+0x3a>
 896:	e0 e8       	ldi	r30, 0x80	; 128
 898:	30 d0       	rcall	.+96     	; 0x8fa <__divsf3_pse+0x90>
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	50 40       	sbci	r21, 0x00	; 0
 89e:	e6 95       	lsr	r30
 8a0:	00 1c       	adc	r0, r0
 8a2:	ca f7       	brpl	.-14     	; 0x896 <__divsf3_pse+0x2c>
 8a4:	29 d0       	rcall	.+82     	; 0x8f8 <__divsf3_pse+0x8e>
 8a6:	fe 2f       	mov	r31, r30
 8a8:	27 d0       	rcall	.+78     	; 0x8f8 <__divsf3_pse+0x8e>
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	bb 1f       	adc	r27, r27
 8b2:	26 17       	cp	r18, r22
 8b4:	37 07       	cpc	r19, r23
 8b6:	48 07       	cpc	r20, r24
 8b8:	ab 07       	cpc	r26, r27
 8ba:	b0 e8       	ldi	r27, 0x80	; 128
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__divsf3_pse+0x56>
 8be:	bb 0b       	sbc	r27, r27
 8c0:	80 2d       	mov	r24, r0
 8c2:	bf 01       	movw	r22, r30
 8c4:	ff 27       	eor	r31, r31
 8c6:	93 58       	subi	r25, 0x83	; 131
 8c8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ca:	2a f0       	brmi	.+10     	; 0x8d6 <__divsf3_pse+0x6c>
 8cc:	9e 3f       	cpi	r25, 0xFE	; 254
 8ce:	51 05       	cpc	r21, r1
 8d0:	68 f0       	brcs	.+26     	; 0x8ec <__divsf3_pse+0x82>
 8d2:	8d c0       	rjmp	.+282    	; 0x9ee <__fp_inf>
 8d4:	d7 c0       	rjmp	.+430    	; 0xa84 <__fp_szero>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	ec f3       	brlt	.-6      	; 0x8d4 <__divsf3_pse+0x6a>
 8da:	98 3e       	cpi	r25, 0xE8	; 232
 8dc:	dc f3       	brlt	.-10     	; 0x8d4 <__divsf3_pse+0x6a>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	9f 5f       	subi	r25, 0xFF	; 255
 8ea:	c9 f7       	brne	.-14     	; 0x8de <__divsf3_pse+0x74>
 8ec:	88 0f       	add	r24, r24
 8ee:	91 1d       	adc	r25, r1
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret
 8f8:	e1 e0       	ldi	r30, 0x01	; 1
 8fa:	66 0f       	add	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	bb 1f       	adc	r27, r27
 902:	62 17       	cp	r22, r18
 904:	73 07       	cpc	r23, r19
 906:	84 07       	cpc	r24, r20
 908:	ba 07       	cpc	r27, r26
 90a:	20 f0       	brcs	.+8      	; 0x914 <__divsf3_pse+0xaa>
 90c:	62 1b       	sub	r22, r18
 90e:	73 0b       	sbc	r23, r19
 910:	84 0b       	sbc	r24, r20
 912:	ba 0b       	sbc	r27, r26
 914:	ee 1f       	adc	r30, r30
 916:	88 f7       	brcc	.-30     	; 0x8fa <__divsf3_pse+0x90>
 918:	e0 95       	com	r30
 91a:	08 95       	ret

0000091c <__fixunssfsi>:
 91c:	98 d0       	rcall	.+304    	; 0xa4e <__fp_splitA>
 91e:	88 f0       	brcs	.+34     	; 0x942 <__fixunssfsi+0x26>
 920:	9f 57       	subi	r25, 0x7F	; 127
 922:	90 f0       	brcs	.+36     	; 0x948 <__fixunssfsi+0x2c>
 924:	b9 2f       	mov	r27, r25
 926:	99 27       	eor	r25, r25
 928:	b7 51       	subi	r27, 0x17	; 23
 92a:	a0 f0       	brcs	.+40     	; 0x954 <__fixunssfsi+0x38>
 92c:	d1 f0       	breq	.+52     	; 0x962 <__fixunssfsi+0x46>
 92e:	66 0f       	add	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	1a f0       	brmi	.+6      	; 0x93e <__fixunssfsi+0x22>
 938:	ba 95       	dec	r27
 93a:	c9 f7       	brne	.-14     	; 0x92e <__fixunssfsi+0x12>
 93c:	12 c0       	rjmp	.+36     	; 0x962 <__fixunssfsi+0x46>
 93e:	b1 30       	cpi	r27, 0x01	; 1
 940:	81 f0       	breq	.+32     	; 0x962 <__fixunssfsi+0x46>
 942:	9f d0       	rcall	.+318    	; 0xa82 <__fp_zero>
 944:	b1 e0       	ldi	r27, 0x01	; 1
 946:	08 95       	ret
 948:	9c c0       	rjmp	.+312    	; 0xa82 <__fp_zero>
 94a:	67 2f       	mov	r22, r23
 94c:	78 2f       	mov	r23, r24
 94e:	88 27       	eor	r24, r24
 950:	b8 5f       	subi	r27, 0xF8	; 248
 952:	39 f0       	breq	.+14     	; 0x962 <__fixunssfsi+0x46>
 954:	b9 3f       	cpi	r27, 0xF9	; 249
 956:	cc f3       	brlt	.-14     	; 0x94a <__fixunssfsi+0x2e>
 958:	86 95       	lsr	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	b3 95       	inc	r27
 960:	d9 f7       	brne	.-10     	; 0x958 <__fixunssfsi+0x3c>
 962:	3e f4       	brtc	.+14     	; 0x972 <__fixunssfsi+0x56>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	08 95       	ret

00000974 <__floatunsisf>:
 974:	e8 94       	clt
 976:	09 c0       	rjmp	.+18     	; 0x98a <__floatsisf+0x12>

00000978 <__floatsisf>:
 978:	97 fb       	bst	r25, 7
 97a:	3e f4       	brtc	.+14     	; 0x98a <__floatsisf+0x12>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	99 23       	and	r25, r25
 98c:	a9 f0       	breq	.+42     	; 0x9b8 <__floatsisf+0x40>
 98e:	f9 2f       	mov	r31, r25
 990:	96 e9       	ldi	r25, 0x96	; 150
 992:	bb 27       	eor	r27, r27
 994:	93 95       	inc	r25
 996:	f6 95       	lsr	r31
 998:	87 95       	ror	r24
 99a:	77 95       	ror	r23
 99c:	67 95       	ror	r22
 99e:	b7 95       	ror	r27
 9a0:	f1 11       	cpse	r31, r1
 9a2:	f8 cf       	rjmp	.-16     	; 0x994 <__floatsisf+0x1c>
 9a4:	fa f4       	brpl	.+62     	; 0x9e4 <__floatsisf+0x6c>
 9a6:	bb 0f       	add	r27, r27
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__floatsisf+0x36>
 9aa:	60 ff       	sbrs	r22, 0
 9ac:	1b c0       	rjmp	.+54     	; 0x9e4 <__floatsisf+0x6c>
 9ae:	6f 5f       	subi	r22, 0xFF	; 255
 9b0:	7f 4f       	sbci	r23, 0xFF	; 255
 9b2:	8f 4f       	sbci	r24, 0xFF	; 255
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	16 c0       	rjmp	.+44     	; 0x9e4 <__floatsisf+0x6c>
 9b8:	88 23       	and	r24, r24
 9ba:	11 f0       	breq	.+4      	; 0x9c0 <__floatsisf+0x48>
 9bc:	96 e9       	ldi	r25, 0x96	; 150
 9be:	11 c0       	rjmp	.+34     	; 0x9e2 <__floatsisf+0x6a>
 9c0:	77 23       	and	r23, r23
 9c2:	21 f0       	breq	.+8      	; 0x9cc <__floatsisf+0x54>
 9c4:	9e e8       	ldi	r25, 0x8E	; 142
 9c6:	87 2f       	mov	r24, r23
 9c8:	76 2f       	mov	r23, r22
 9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <__floatsisf+0x5e>
 9cc:	66 23       	and	r22, r22
 9ce:	71 f0       	breq	.+28     	; 0x9ec <__floatsisf+0x74>
 9d0:	96 e8       	ldi	r25, 0x86	; 134
 9d2:	86 2f       	mov	r24, r22
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	2a f0       	brmi	.+10     	; 0x9e4 <__floatsisf+0x6c>
 9da:	9a 95       	dec	r25
 9dc:	66 0f       	add	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	da f7       	brpl	.-10     	; 0x9da <__floatsisf+0x62>
 9e4:	88 0f       	add	r24, r24
 9e6:	96 95       	lsr	r25
 9e8:	87 95       	ror	r24
 9ea:	97 f9       	bld	r25, 7
 9ec:	08 95       	ret

000009ee <__fp_inf>:
 9ee:	97 f9       	bld	r25, 7
 9f0:	9f 67       	ori	r25, 0x7F	; 127
 9f2:	80 e8       	ldi	r24, 0x80	; 128
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	08 95       	ret

000009fa <__fp_nan>:
 9fa:	9f ef       	ldi	r25, 0xFF	; 255
 9fc:	80 ec       	ldi	r24, 0xC0	; 192
 9fe:	08 95       	ret

00000a00 <__fp_pscA>:
 a00:	00 24       	eor	r0, r0
 a02:	0a 94       	dec	r0
 a04:	16 16       	cp	r1, r22
 a06:	17 06       	cpc	r1, r23
 a08:	18 06       	cpc	r1, r24
 a0a:	09 06       	cpc	r0, r25
 a0c:	08 95       	ret

00000a0e <__fp_pscB>:
 a0e:	00 24       	eor	r0, r0
 a10:	0a 94       	dec	r0
 a12:	12 16       	cp	r1, r18
 a14:	13 06       	cpc	r1, r19
 a16:	14 06       	cpc	r1, r20
 a18:	05 06       	cpc	r0, r21
 a1a:	08 95       	ret

00000a1c <__fp_round>:
 a1c:	09 2e       	mov	r0, r25
 a1e:	03 94       	inc	r0
 a20:	00 0c       	add	r0, r0
 a22:	11 f4       	brne	.+4      	; 0xa28 <__fp_round+0xc>
 a24:	88 23       	and	r24, r24
 a26:	52 f0       	brmi	.+20     	; 0xa3c <__fp_round+0x20>
 a28:	bb 0f       	add	r27, r27
 a2a:	40 f4       	brcc	.+16     	; 0xa3c <__fp_round+0x20>
 a2c:	bf 2b       	or	r27, r31
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__fp_round+0x18>
 a30:	60 ff       	sbrs	r22, 0
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <__fp_round+0x20>
 a34:	6f 5f       	subi	r22, 0xFF	; 255
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__fp_split3>:
 a3e:	57 fd       	sbrc	r21, 7
 a40:	90 58       	subi	r25, 0x80	; 128
 a42:	44 0f       	add	r20, r20
 a44:	55 1f       	adc	r21, r21
 a46:	59 f0       	breq	.+22     	; 0xa5e <__fp_splitA+0x10>
 a48:	5f 3f       	cpi	r21, 0xFF	; 255
 a4a:	71 f0       	breq	.+28     	; 0xa68 <__fp_splitA+0x1a>
 a4c:	47 95       	ror	r20

00000a4e <__fp_splitA>:
 a4e:	88 0f       	add	r24, r24
 a50:	97 fb       	bst	r25, 7
 a52:	99 1f       	adc	r25, r25
 a54:	61 f0       	breq	.+24     	; 0xa6e <__fp_splitA+0x20>
 a56:	9f 3f       	cpi	r25, 0xFF	; 255
 a58:	79 f0       	breq	.+30     	; 0xa78 <__fp_splitA+0x2a>
 a5a:	87 95       	ror	r24
 a5c:	08 95       	ret
 a5e:	12 16       	cp	r1, r18
 a60:	13 06       	cpc	r1, r19
 a62:	14 06       	cpc	r1, r20
 a64:	55 1f       	adc	r21, r21
 a66:	f2 cf       	rjmp	.-28     	; 0xa4c <__fp_split3+0xe>
 a68:	46 95       	lsr	r20
 a6a:	f1 df       	rcall	.-30     	; 0xa4e <__fp_splitA>
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <__fp_splitA+0x30>
 a6e:	16 16       	cp	r1, r22
 a70:	17 06       	cpc	r1, r23
 a72:	18 06       	cpc	r1, r24
 a74:	99 1f       	adc	r25, r25
 a76:	f1 cf       	rjmp	.-30     	; 0xa5a <__fp_splitA+0xc>
 a78:	86 95       	lsr	r24
 a7a:	71 05       	cpc	r23, r1
 a7c:	61 05       	cpc	r22, r1
 a7e:	08 94       	sec
 a80:	08 95       	ret

00000a82 <__fp_zero>:
 a82:	e8 94       	clt

00000a84 <__fp_szero>:
 a84:	bb 27       	eor	r27, r27
 a86:	66 27       	eor	r22, r22
 a88:	77 27       	eor	r23, r23
 a8a:	cb 01       	movw	r24, r22
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__mulsf3>:
 a90:	0b d0       	rcall	.+22     	; 0xaa8 <__mulsf3x>
 a92:	c4 cf       	rjmp	.-120    	; 0xa1c <__fp_round>
 a94:	b5 df       	rcall	.-150    	; 0xa00 <__fp_pscA>
 a96:	28 f0       	brcs	.+10     	; 0xaa2 <__mulsf3+0x12>
 a98:	ba df       	rcall	.-140    	; 0xa0e <__fp_pscB>
 a9a:	18 f0       	brcs	.+6      	; 0xaa2 <__mulsf3+0x12>
 a9c:	95 23       	and	r25, r21
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <__mulsf3+0x12>
 aa0:	a6 cf       	rjmp	.-180    	; 0x9ee <__fp_inf>
 aa2:	ab cf       	rjmp	.-170    	; 0x9fa <__fp_nan>
 aa4:	11 24       	eor	r1, r1
 aa6:	ee cf       	rjmp	.-36     	; 0xa84 <__fp_szero>

00000aa8 <__mulsf3x>:
 aa8:	ca df       	rcall	.-108    	; 0xa3e <__fp_split3>
 aaa:	a0 f3       	brcs	.-24     	; 0xa94 <__mulsf3+0x4>

00000aac <__mulsf3_pse>:
 aac:	95 9f       	mul	r25, r21
 aae:	d1 f3       	breq	.-12     	; 0xaa4 <__mulsf3+0x14>
 ab0:	95 0f       	add	r25, r21
 ab2:	50 e0       	ldi	r21, 0x00	; 0
 ab4:	55 1f       	adc	r21, r21
 ab6:	62 9f       	mul	r22, r18
 ab8:	f0 01       	movw	r30, r0
 aba:	72 9f       	mul	r23, r18
 abc:	bb 27       	eor	r27, r27
 abe:	f0 0d       	add	r31, r0
 ac0:	b1 1d       	adc	r27, r1
 ac2:	63 9f       	mul	r22, r19
 ac4:	aa 27       	eor	r26, r26
 ac6:	f0 0d       	add	r31, r0
 ac8:	b1 1d       	adc	r27, r1
 aca:	aa 1f       	adc	r26, r26
 acc:	64 9f       	mul	r22, r20
 ace:	66 27       	eor	r22, r22
 ad0:	b0 0d       	add	r27, r0
 ad2:	a1 1d       	adc	r26, r1
 ad4:	66 1f       	adc	r22, r22
 ad6:	82 9f       	mul	r24, r18
 ad8:	22 27       	eor	r18, r18
 ada:	b0 0d       	add	r27, r0
 adc:	a1 1d       	adc	r26, r1
 ade:	62 1f       	adc	r22, r18
 ae0:	73 9f       	mul	r23, r19
 ae2:	b0 0d       	add	r27, r0
 ae4:	a1 1d       	adc	r26, r1
 ae6:	62 1f       	adc	r22, r18
 ae8:	83 9f       	mul	r24, r19
 aea:	a0 0d       	add	r26, r0
 aec:	61 1d       	adc	r22, r1
 aee:	22 1f       	adc	r18, r18
 af0:	74 9f       	mul	r23, r20
 af2:	33 27       	eor	r19, r19
 af4:	a0 0d       	add	r26, r0
 af6:	61 1d       	adc	r22, r1
 af8:	23 1f       	adc	r18, r19
 afa:	84 9f       	mul	r24, r20
 afc:	60 0d       	add	r22, r0
 afe:	21 1d       	adc	r18, r1
 b00:	82 2f       	mov	r24, r18
 b02:	76 2f       	mov	r23, r22
 b04:	6a 2f       	mov	r22, r26
 b06:	11 24       	eor	r1, r1
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	50 40       	sbci	r21, 0x00	; 0
 b0c:	8a f0       	brmi	.+34     	; 0xb30 <__mulsf3_pse+0x84>
 b0e:	e1 f0       	breq	.+56     	; 0xb48 <__mulsf3_pse+0x9c>
 b10:	88 23       	and	r24, r24
 b12:	4a f0       	brmi	.+18     	; 0xb26 <__mulsf3_pse+0x7a>
 b14:	ee 0f       	add	r30, r30
 b16:	ff 1f       	adc	r31, r31
 b18:	bb 1f       	adc	r27, r27
 b1a:	66 1f       	adc	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__mulsf3_pse+0x64>
 b26:	9e 3f       	cpi	r25, 0xFE	; 254
 b28:	51 05       	cpc	r21, r1
 b2a:	70 f0       	brcs	.+28     	; 0xb48 <__mulsf3_pse+0x9c>
 b2c:	60 cf       	rjmp	.-320    	; 0x9ee <__fp_inf>
 b2e:	aa cf       	rjmp	.-172    	; 0xa84 <__fp_szero>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	ec f3       	brlt	.-6      	; 0xb2e <__mulsf3_pse+0x82>
 b34:	98 3e       	cpi	r25, 0xE8	; 232
 b36:	dc f3       	brlt	.-10     	; 0xb2e <__mulsf3_pse+0x82>
 b38:	86 95       	lsr	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f7 95       	ror	r31
 b42:	e7 95       	ror	r30
 b44:	9f 5f       	subi	r25, 0xFF	; 255
 b46:	c1 f7       	brne	.-16     	; 0xb38 <__mulsf3_pse+0x8c>
 b48:	fe 2b       	or	r31, r30
 b4a:	88 0f       	add	r24, r24
 b4c:	91 1d       	adc	r25, r1
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	97 f9       	bld	r25, 7
 b54:	08 95       	ret

00000b56 <_exit>:
 b56:	f8 94       	cli

00000b58 <__stop_program>:
 b58:	ff cf       	rjmp	.-2      	; 0xb58 <__stop_program>
