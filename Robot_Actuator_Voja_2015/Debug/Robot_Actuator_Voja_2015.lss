
Robot_Actuator_Voja_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000990  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001f7  00800100  00800100  00000a04  2**0
                  ALLOC
  2 .debug_aranges 00000118  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001db  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a5d  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004fe  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c88  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000031e  00000000  00000000  00002a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000037f  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00003129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		AX_SetAngle(60, 180, 1, AX_SERVO4);//otvori ruku za uzimanje kokica sa leve strane
		_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO4);//zatvori ruku za uzimanje kokica sa leve strane
		_delay_ms(1000);
	}*/
}//END OF colectThePopcorn
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
					  ide. U slucaju neuspesne inicijalizacije MOb- a vraca 0
* Parameters        : unsigned int ide
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
   2:	00 00       	nop
	TCCR0A = (1 << WGM01) | (1 << CS02);
	TIMSK0 |= (1 << OCIE0A);
	OCR0A = 43;
	
	SREG |= 0x80;
}
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	b0 c0       	rjmp	.+352    	; 0x1aa <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e9       	ldi	r30, 0x90	; 144
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	12 e0       	ldi	r17, 0x02	; 2
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 3f       	cpi	r26, 0xF7	; 247
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	a5 d2       	rcall	.+1354   	; 0x616 <main>
  cc:	5f c4       	rjmp	.+2238   	; 0x98c <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <knockDownTheClapperboards>:
#include "uart.h"
#include "can.h"

void knockDownTheClapperboards(unsigned char side)
{
	if(side == 1)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	19 f5       	brne	.+70     	; 0x11a <knockDownTheClapperboards+0x4a>
	{
		AX_SetAngle(60, 180, 1, AX_SERVO1);//izbaci udaraljku sa desne strane
  d4:	8c e3       	ldi	r24, 0x3C	; 60
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	64 eb       	ldi	r22, 0xB4	; 180
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	35 d2       	rcall	.+1130   	; 0x54c <AX_SetAngle>
  e2:	20 e1       	ldi	r18, 0x10	; 16
  e4:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	44 e1       	ldi	r20, 0x14	; 20
  e8:	51 e0       	ldi	r21, 0x01	; 1
  ea:	ca 01       	movw	r24, r20
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <knockDownTheClapperboards+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f4:	d1 f7       	brne	.-12     	; 0xea <knockDownTheClapperboards+0x1a>
			_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO1);//uvuce udaraljku sa desne strane
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	64 eb       	ldi	r22, 0xB4	; 180
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	24 d2       	rcall	.+1096   	; 0x54c <AX_SetAngle>
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	37 e2       	ldi	r19, 0x27	; 39
 108:	44 e1       	ldi	r20, 0x14	; 20
 10a:	51 e0       	ldi	r21, 0x01	; 1
 10c:	ca 01       	movw	r24, r20
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <knockDownTheClapperboards+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d1 f7       	brne	.-12     	; 0x10c <knockDownTheClapperboards+0x3c>
 118:	08 95       	ret
			_delay_ms(1000);
		
	}else
	{
		AX_SetAngle(60, 180, 1, AX_SERVO2);//izbaci udaraljku sa leve strane
 11a:	8c e3       	ldi	r24, 0x3C	; 60
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	64 eb       	ldi	r22, 0xB4	; 180
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	12 d2       	rcall	.+1060   	; 0x54c <AX_SetAngle>
 128:	20 e1       	ldi	r18, 0x10	; 16
 12a:	37 e2       	ldi	r19, 0x27	; 39
 12c:	44 e1       	ldi	r20, 0x14	; 20
 12e:	51 e0       	ldi	r21, 0x01	; 1
 130:	ca 01       	movw	r24, r20
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <knockDownTheClapperboards+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 136:	21 50       	subi	r18, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d1 f7       	brne	.-12     	; 0x130 <knockDownTheClapperboards+0x60>
			_delay_ms(1000);
		AX_SetAngle(160, 180, 1, AX_SERVO2);//uvuce udaraljku sa leve strane
 13c:	80 ea       	ldi	r24, 0xA0	; 160
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	64 eb       	ldi	r22, 0xB4	; 180
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	22 e0       	ldi	r18, 0x02	; 2
 148:	01 d2       	rcall	.+1026   	; 0x54c <AX_SetAngle>
 14a:	20 e1       	ldi	r18, 0x10	; 16
 14c:	37 e2       	ldi	r19, 0x27	; 39
 14e:	44 e1       	ldi	r20, 0x14	; 20
 150:	51 e0       	ldi	r21, 0x01	; 1
 152:	ca 01       	movw	r24, r20
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <knockDownTheClapperboards+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d1 f7       	brne	.-12     	; 0x152 <knockDownTheClapperboards+0x82>
 15e:	08 95       	ret

00000160 <action>:
		_delay_ms(1000);
	}*/
}//END OF colectThePopcorn

void action(canMsg msg)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	2a 97       	sbiw	r28, 0x0a	; 10
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	09 83       	std	Y+1, r16	; 0x01
 17a:	1a 83       	std	Y+2, r17	; 0x02
 17c:	2b 83       	std	Y+3, r18	; 0x03
 17e:	3c 83       	std	Y+4, r19	; 0x04
 180:	4d 83       	std	Y+5, r20	; 0x05
 182:	5e 83       	std	Y+6, r21	; 0x06
 184:	6f 83       	std	Y+7, r22	; 0x07
 186:	78 87       	std	Y+8, r23	; 0x08
 188:	89 87       	std	Y+9, r24	; 0x09
 18a:	9a 87       	std	Y+10, r25	; 0x0a
 18c:	81 2f       	mov	r24, r17
	unsigned char command = msg.data[0];
	unsigned char side = msg.data[1];
	
	switch(command)
 18e:	01 34       	cpi	r16, 0x41	; 65
 190:	09 f4       	brne	.+2      	; 0x194 <action+0x34>
	{
		case 'A':
			knockDownTheClapperboards(side);
 192:	9e df       	rcall	.-196    	; 0xd0 <knockDownTheClapperboards>
				
		case 'B':
			colectThePopcorn(side);
				break;
	}
 194:	2a 96       	adiw	r28, 0x0a	; 10
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	0b b6       	in	r0, 0x3b	; 59
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
 1d4:	50 91 ed 00 	lds	r21, 0x00ED
 1d8:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 1da:	ad ee       	ldi	r26, 0xED	; 237
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 1de:	ee ee       	ldi	r30, 0xEE	; 238
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
 1e2:	89 2f       	mov	r24, r25
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	8c 93       	st	X, r24
			
		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
 1ea:	80 81       	ld	r24, Z
 1ec:	85 ff       	sbrs	r24, 5
 1ee:	5e c0       	rjmp	.+188    	; 0x2ac <__vector_18+0x102>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	80 93 ef 00 	sts	0x00EF, r24
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
 1f6:	ee ee       	ldi	r30, 0xEE	; 238
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7d       	andi	r24, 0xDF	; 223
 1fe:	80 83       	st	Z, r24
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
			
			for(unsigned char i = 0; i < 8; i++)
				rxBuffer[rxWrIndex].data[i] = CANMSG;
 204:	ca ef       	ldi	r28, 0xFA	; 250
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	a3 e0       	ldi	r26, 0x03	; 3
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	20 91 02 01 	lds	r18, 0x0102
 210:	48 81       	ld	r20, Y
 212:	82 2f       	mov	r24, r18
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9c 01       	movw	r18, r24
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	28 0f       	add	r18, r24
 22a:	39 1f       	adc	r19, r25
 22c:	26 0f       	add	r18, r22
 22e:	37 1f       	adc	r19, r23
 230:	fd 01       	movw	r30, r26
 232:	e2 0f       	add	r30, r18
 234:	f3 1f       	adc	r31, r19
 236:	40 83       	st	Z, r20
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
			
			for(unsigned char i = 0; i < 8; i++)
 23c:	68 30       	cpi	r22, 0x08	; 8
 23e:	71 05       	cpc	r23, r1
 240:	29 f7       	brne	.-54     	; 0x20c <__vector_18+0x62>
				rxBuffer[rxWrIndex].data[i] = CANMSG;
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);
						
			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
 242:	40 91 02 01 	lds	r20, 0x0102
 246:	80 91 f2 00 	lds	r24, 0x00F2
 24a:	20 91 f3 00 	lds	r18, 0x00F3
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	82 95       	swap	r24
 25e:	86 95       	lsr	r24
 260:	87 70       	andi	r24, 0x07	; 7
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	28 2b       	or	r18, r24
 266:	39 2b       	or	r19, r25
 268:	84 2f       	mov	r24, r20
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	e5 5f       	subi	r30, 0xF5	; 245
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	31 83       	std	Z+1, r19	; 0x01
 288:	20 83       	st	Z, r18
		
			if(++rxWrIndex == RX_BUFFER_SIZE)
 28a:	80 91 02 01 	lds	r24, 0x0102
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 02 01 	sts	0x0102, r24
 294:	80 91 02 01 	lds	r24, 0x0102
 298:	82 33       	cpi	r24, 0x32	; 50
 29a:	11 f4       	brne	.+4      	; 0x2a0 <__vector_18+0xf6>
				rxWrIndex = 0;
 29c:	10 92 02 01 	sts	0x0102, r1
			
			rxCounter++;
 2a0:	80 91 00 01 	lds	r24, 0x0100
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 00 01 	sts	0x0100, r24
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <__vector_18+0x120>
			
			break;
		}
		
		// proveravam da li je uspesno poslat podatak (ako je MOb bio podesen kao predajnik)
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
 2ac:	80 81       	ld	r24, Z
 2ae:	86 ff       	sbrs	r24, 6
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <__vector_18+0x118>
		{
			CANCDMOB = 0; // disable mob
 2b2:	10 92 ef 00 	sts	0x00EF, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
 2b6:	ee ee       	ldi	r30, 0xEE	; 238
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	8f 7b       	andi	r24, 0xBF	; 191
 2be:	80 83       	st	Z, r24
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <__vector_18+0x120>
{
	unsigned char tempPage = CANPAGE;
	unsigned char ch;
	
	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
 2c2:	9f 5f       	subi	r25, 0xFF	; 255
 2c4:	9f 30       	cpi	r25, 0x0F	; 15
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_18+0x120>
 2c8:	8c cf       	rjmp	.-232    	; 0x1e2 <__vector_18+0x38>
			
			break;
		}
	}
		
	CANPAGE = tempPage;
 2ca:	50 93 ed 00 	sts	0x00ED, r21
	CANGIT = CANGIT; // jako, jako retardirano... Kada upisem 1, on resetuje flag? Najgluplje moguce resenje. Glupi ATMEL
 2ce:	ea ed       	ldi	r30, 0xDA	; 218
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	80 83       	st	Z, r24
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0b be       	out	0x3b, r0	; 59
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <CAN_Init>:
					  Podrazumeva se da je frekvencija kontrolera 10MHz
* Parameters        : None
* Return Value      : void
*********************************************************************************/
void CAN_Init(void)
{
 300:	2f 92       	push	r2
 302:	3f 92       	push	r3
 304:	4f 92       	push	r4
 306:	5f 92       	push	r5
 308:	6f 92       	push	r6
 30a:	7f 92       	push	r7
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	unsigned char ch;
	unsigned char data;
	
	// Reset the CAN controller
	CANGCON = 0x01;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 d8 00 	sts	0x00D8, r24
 32a:	20 e0       	ldi	r18, 0x00	; 0
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 32c:	0f 2e       	mov	r0, r31
 32e:	fd ee       	ldi	r31, 0xED	; 237
 330:	4f 2e       	mov	r4, r31
 332:	55 24       	eor	r5, r5
 334:	f0 2d       	mov	r31, r0
		
		CANSTMOB = 0;
 336:	0f 2e       	mov	r0, r31
 338:	fe ee       	ldi	r31, 0xEE	; 238
 33a:	6f 2e       	mov	r6, r31
 33c:	77 24       	eor	r7, r7
 33e:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
 340:	0f 2e       	mov	r0, r31
 342:	ff ee       	ldi	r31, 0xEF	; 239
 344:	8f 2e       	mov	r8, r31
 346:	99 24       	eor	r9, r9
 348:	f0 2d       	mov	r31, r0
		
		CANIDT1 = 0;
 34a:	0f 2e       	mov	r0, r31
 34c:	f3 ef       	ldi	r31, 0xF3	; 243
 34e:	af 2e       	mov	r10, r31
 350:	bb 24       	eor	r11, r11
 352:	f0 2d       	mov	r31, r0
		CANIDT2 = 0;
 354:	0f 2e       	mov	r0, r31
 356:	f2 ef       	ldi	r31, 0xF2	; 242
 358:	cf 2e       	mov	r12, r31
 35a:	dd 24       	eor	r13, r13
 35c:	f0 2d       	mov	r31, r0
		CANIDT3 = 0;
 35e:	0f 2e       	mov	r0, r31
 360:	f1 ef       	ldi	r31, 0xF1	; 241
 362:	ef 2e       	mov	r14, r31
 364:	ff 24       	eor	r15, r15
 366:	f0 2d       	mov	r31, r0
		CANIDT4 = 0;
 368:	00 ef       	ldi	r16, 0xF0	; 240
 36a:	10 e0       	ldi	r17, 0x00	; 0
		CANIDM1 = 0;
 36c:	67 ef       	ldi	r22, 0xF7	; 247
 36e:	70 e0       	ldi	r23, 0x00	; 0
		CANIDM2 = 0;
 370:	46 ef       	ldi	r20, 0xF6	; 246
 372:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM3 = 0;
 374:	c5 ef       	ldi	r28, 0xF5	; 245
 376:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM4 = 0;
 378:	0f 2e       	mov	r0, r31
 37a:	f4 ef       	ldi	r31, 0xF4	; 244
 37c:	2f 2e       	mov	r2, r31
 37e:	33 24       	eor	r3, r3
 380:	f0 2d       	mov	r31, r0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 382:	ea ef       	ldi	r30, 0xFA	; 250
 384:	f0 e0       	ldi	r31, 0x00	; 0
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4; 
 386:	82 2f       	mov	r24, r18
 388:	82 95       	swap	r24
 38a:	80 7f       	andi	r24, 0xF0	; 240
 38c:	d2 01       	movw	r26, r4
 38e:	8c 93       	st	X, r24
		
		CANSTMOB = 0;
 390:	d3 01       	movw	r26, r6
 392:	1c 92       	st	X, r1
		CANCDMOB = 0;
 394:	d4 01       	movw	r26, r8
 396:	1c 92       	st	X, r1
		
		CANIDT1 = 0;
 398:	d5 01       	movw	r26, r10
 39a:	1c 92       	st	X, r1
		CANIDT2 = 0;
 39c:	d6 01       	movw	r26, r12
 39e:	1c 92       	st	X, r1
		CANIDT3 = 0;
 3a0:	d7 01       	movw	r26, r14
 3a2:	1c 92       	st	X, r1
		CANIDT4 = 0;
 3a4:	d8 01       	movw	r26, r16
 3a6:	1c 92       	st	X, r1
		CANIDM1 = 0;
 3a8:	db 01       	movw	r26, r22
 3aa:	1c 92       	st	X, r1
		CANIDM2 = 0;
 3ac:	da 01       	movw	r26, r20
 3ae:	1c 92       	st	X, r1
		CANIDM3 = 0;
 3b0:	18 82       	st	Y, r1
		CANIDM4 = 0;
 3b2:	d1 01       	movw	r26, r2
 3b4:	1c 92       	st	X, r1
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0; 
 3b8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;
		
		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <CAN_Init+0xb8>
	
	// Reset the CAN controller
	CANGCON = 0x01;
	
	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	2f 30       	cpi	r18, 0x0F	; 15
 3c4:	01 f7       	brne	.-64     	; 0x386 <CAN_Init+0x86>
			CANMSG = 0; 
	}
	
	
	// Enable the CAN controller
	CANGCON = 0x02;
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	80 93 d8 00 	sts	0x00D8, r24
	
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = (1 << PRS2) | (1 << PRS0); // Propagation Time Segment-> 6xTq-> BILO 5
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = (1 << PHS22) | (1 << PHS21) /*| (1 << PHS20) */| (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 7xTq, Phase Segment 1-> 8xTq
 3d8:	8e e6       	ldi	r24, 0x6E	; 110
 3da:	80 93 e4 00 	sts	0x00E4, r24
	
	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/
	
	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
 3de:	10 92 e5 00 	sts	0x00E5, r1
	
	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
 3e2:	80 eb       	ldi	r24, 0xB0	; 176
 3e4:	80 93 db 00 	sts	0x00DB, r24
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
 3e8:	8f e7       	ldi	r24, 0x7F	; 127
 3ea:	80 93 df 00 	sts	0x00DF, r24
	CANIE2 = 0xFF;
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	80 93 de 00 	sts	0x00DE, r24

	//sei();
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	7f 90       	pop	r7
 40e:	6f 90       	pop	r6
 410:	5f 90       	pop	r5
 412:	4f 90       	pop	r4
 414:	3f 90       	pop	r3
 416:	2f 90       	pop	r2
 418:	08 95       	ret

0000041a <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
 41a:	dc 01       	movw	r26, r24
	// sve dok ne stigne neki podatak ostajem u funkciji
	
	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
 41c:	80 91 00 01 	lds	r24, 0x0100
 420:	88 23       	and	r24, r24
 422:	e1 f3       	breq	.-8      	; 0x41c <CAN_read+0x2>
	cli();
 424:	f8 94       	cli
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	71 e0       	ldi	r23, 0x01	; 1
 42e:	20 91 01 01 	lds	r18, 0x0101
 432:	82 2f       	mov	r24, r18
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9c 01       	movw	r18, r24
 438:	22 0f       	add	r18, r18
 43a:	33 1f       	adc	r19, r19
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	28 0f       	add	r18, r24
 44a:	39 1f       	adc	r19, r25
 44c:	24 0f       	add	r18, r20
 44e:	35 1f       	adc	r19, r21
 450:	fb 01       	movw	r30, r22
 452:	e2 0f       	add	r30, r18
 454:	f3 1f       	adc	r31, r19
 456:	80 81       	ld	r24, Z
 458:	fd 01       	movw	r30, r26
 45a:	e4 0f       	add	r30, r20
 45c:	f5 1f       	adc	r31, r21
 45e:	80 83       	st	Z, r24
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
	while(rxCounter == 0);
	cli();
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO
	
	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
 464:	48 30       	cpi	r20, 0x08	; 8
 466:	51 05       	cpc	r21, r1
 468:	11 f7       	brne	.-60     	; 0x42e <CAN_read+0x14>
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
	
	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
 46a:	20 91 01 01 	lds	r18, 0x0101
 46e:	82 2f       	mov	r24, r18
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	e8 0f       	add	r30, r24
 486:	f9 1f       	adc	r31, r25
 488:	e5 5f       	subi	r30, 0xF5	; 245
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	19 96       	adiw	r26, 0x09	; 9
 492:	9c 93       	st	X, r25
 494:	8e 93       	st	-X, r24
 496:	18 97       	sbiw	r26, 0x08	; 8
	
	if(++rxRdIndex == RX_BUFFER_SIZE)
 498:	80 91 01 01 	lds	r24, 0x0101
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 01 01 	sts	0x0101, r24
 4a2:	80 91 01 01 	lds	r24, 0x0101
 4a6:	82 33       	cpi	r24, 0x32	; 50
 4a8:	11 f4       	brne	.+4      	; 0x4ae <CAN_read+0x94>
		rxRdIndex = 0;
 4aa:	10 92 01 01 	sts	0x0101, r1
	
	
	rxCounter--;
 4ae:	80 91 00 01 	lds	r24, 0x0100
 4b2:	81 50       	subi	r24, 0x01	; 1
 4b4:	80 93 00 01 	sts	0x0100, r24
	sei();
 4b8:	78 94       	sei
}
 4ba:	08 95       	ret

000004bc <AX_UART_Init>:

void AX_UART_Init(void)
{
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRE &= ~((1 << 0x00) | (1 << 0x01));
 4bc:	ed e2       	ldi	r30, 0x2D	; 45
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8c 7f       	andi	r24, 0xFC	; 252
 4c4:	80 83       	st	Z, r24
	//PORTE = 0;
	UCSR0A = 0;
 4c6:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4ca:	88 e1       	ldi	r24, 0x18	; 24
 4cc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	80 93 c2 00 	sts	0x00C2, r24
	
	UBRR0H = 0;
 4d6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 5;
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	80 93 c4 00 	sts	0x00C4, r24
 4e0:	28 ee       	ldi	r18, 0xE8	; 232
 4e2:	33 e0       	ldi	r19, 0x03	; 3
 4e4:	44 e1       	ldi	r20, 0x14	; 20
 4e6:	51 e0       	ldi	r21, 0x01	; 1
 4e8:	ca 01       	movw	r24, r20
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <AX_UART_Init+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f2:	d1 f7       	brne	.-12     	; 0x4e8 <AX_UART_Init+0x2c>
	
	_delay_ms(100);
}
 4f4:	08 95       	ret

000004f6 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
 4f6:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 4f8:	e0 ec       	ldi	r30, 0xC0	; 192
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	85 ff       	sbrs	r24, 5
 500:	fd cf       	rjmp	.-6      	; 0x4fc <AX_SendChar+0x6>
	UDR0 = data;	
 502:	90 93 c6 00 	sts	0x00C6, r25
}
 506:	08 95       	ret

00000508 <AX_StopTransmitter>:
	status[5] = AX_ReadChar();
}

void AX_StopTransmitter(void)
{
	while( !(UCSR0A & (1<<TXC0)) );
 508:	e0 ec       	ldi	r30, 0xC0	; 192
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	86 ff       	sbrs	r24, 6
 510:	fd cf       	rjmp	.-6      	; 0x50c <AX_StopTransmitter+0x4>
	UCSR0B &= 0xF7;
 512:	e1 ec       	ldi	r30, 0xC1	; 193
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	87 7f       	andi	r24, 0xF7	; 247
 51a:	80 83       	st	Z, r24
	UCSR0A |= 0x40;
 51c:	e0 ec       	ldi	r30, 0xC0	; 192
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	80 64       	ori	r24, 0x40	; 64
 524:	80 83       	st	Z, r24
}
 526:	08 95       	ret

00000528 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
	UCSR0B |= 0x08;
 528:	e1 ec       	ldi	r30, 0xC1	; 193
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	88 60       	ori	r24, 0x08	; 8
 530:	80 83       	st	Z, r24
}
 532:	08 95       	ret

00000534 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
	UCSR0B &= 0xEF;
 534:	e1 ec       	ldi	r30, 0xC1	; 193
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	8f 7e       	andi	r24, 0xEF	; 239
 53c:	80 83       	st	Z, r24
}
 53e:	08 95       	ret

00000540 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
	UCSR0B |= 0x10;
 540:	e1 ec       	ldi	r30, 0xC1	; 193
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 61       	ori	r24, 0x10	; 16
 548:	80 83       	st	Z, r24
}
 54a:	08 95       	ret

0000054c <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
 54c:	6f 92       	push	r6
 54e:	7f 92       	push	r7
 550:	8f 92       	push	r8
 552:	9f 92       	push	r9
 554:	af 92       	push	r10
 556:	bf 92       	push	r11
 558:	cf 92       	push	r12
 55a:	df 92       	push	r13
 55c:	ef 92       	push	r14
 55e:	ff 92       	push	r15
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	5b 01       	movw	r10, r22
 566:	94 2e       	mov	r9, r20
 568:	62 2e       	mov	r6, r18
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;
	
	angle = (unsigned int)(1023 *((double)angle/300.0));
 56a:	a0 e0       	ldi	r26, 0x00	; 0
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	bc 01       	movw	r22, r24
 570:	cd 01       	movw	r24, r26
 572:	1b d1       	rcall	.+566    	; 0x7aa <__floatunsisf>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	46 e9       	ldi	r20, 0x96	; 150
 57a:	53 e4       	ldi	r21, 0x43	; 67
 57c:	82 d0       	rcall	.+260    	; 0x682 <__divsf3>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 ec       	ldi	r19, 0xC0	; 192
 582:	4f e7       	ldi	r20, 0x7F	; 127
 584:	54 e4       	ldi	r21, 0x44	; 68
 586:	9f d1       	rcall	.+830    	; 0x8c6 <__mulsf3>
 588:	e4 d0       	rcall	.+456    	; 0x752 <__fixunssfsi>
 58a:	6b 01       	movw	r12, r22
 58c:	7c 01       	movw	r14, r24
	
	angle_H = (unsigned char)(angle >> 8);
	angle_L = (unsigned char)(angle & 0x00FF);
	
	speed |= (direction << 10);
 58e:	19 2d       	mov	r17, r9
 590:	11 0f       	add	r17, r17
 592:	11 0f       	add	r17, r17
 594:	00 e0       	ldi	r16, 0x00	; 0
 596:	0a 29       	or	r16, r10
 598:	1b 29       	or	r17, r11
	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
	
	AX_StopReceiver();
 59a:	cc df       	rcall	.-104    	; 0x534 <AX_StopReceiver>
	
	AX_SendChar(START);
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	ab df       	rcall	.-170    	; 0x4f6 <AX_SendChar>
	AX_SendChar(START);
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	a9 df       	rcall	.-174    	; 0x4f6 <AX_SendChar>
	AX_SendChar(id);
 5a4:	86 2d       	mov	r24, r6
 5a6:	a7 df       	rcall	.-178    	; 0x4f6 <AX_SendChar>
	AX_SendChar(LENGTH);
 5a8:	87 e0       	ldi	r24, 0x07	; 7
 5aa:	a5 df       	rcall	.-182    	; 0x4f6 <AX_SendChar>
	AX_SendChar(INSTR);
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	a3 df       	rcall	.-186    	; 0x4f6 <AX_SendChar>
	AX_SendChar(ADDRESS);
 5b0:	8e e1       	ldi	r24, 0x1E	; 30
 5b2:	a1 df       	rcall	.-190    	; 0x4f6 <AX_SendChar>
	AX_SendChar(angle_L);
 5b4:	8c 2d       	mov	r24, r12
 5b6:	9f df       	rcall	.-194    	; 0x4f6 <AX_SendChar>
	AX_SendChar(angle_H);
 5b8:	8d 2d       	mov	r24, r13
 5ba:	9d df       	rcall	.-198    	; 0x4f6 <AX_SendChar>
	AX_SendChar(speed_L);
 5bc:	80 2f       	mov	r24, r16
 5be:	9b df       	rcall	.-202    	; 0x4f6 <AX_SendChar>
	AX_SendChar(speed_H);
 5c0:	81 2f       	mov	r24, r17
 5c2:	99 df       	rcall	.-206    	; 0x4f6 <AX_SendChar>
	AX_SendChar(checksum);
 5c4:	26 2d       	mov	r18, r6
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	28 5d       	subi	r18, 0xD8	; 216
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	2c 0d       	add	r18, r12
 5ce:	31 1d       	adc	r19, r1
 5d0:	2d 0d       	add	r18, r13
 5d2:	31 1d       	adc	r19, r1
 5d4:	20 0f       	add	r18, r16
 5d6:	31 1d       	adc	r19, r1
 5d8:	21 0f       	add	r18, r17
 5da:	31 1d       	adc	r19, r1
 5dc:	82 2f       	mov	r24, r18
 5de:	80 95       	com	r24
 5e0:	8a df       	rcall	.-236    	; 0x4f6 <AX_SendChar>
	
	AX_StopTransmitter();
 5e2:	92 df       	rcall	.-220    	; 0x508 <AX_StopTransmitter>
	AX_ReleaseReceiver();
 5e4:	ad df       	rcall	.-166    	; 0x540 <AX_ReleaseReceiver>
 5e6:	24 ef       	ldi	r18, 0xF4	; 244
 5e8:	31 e0       	ldi	r19, 0x01	; 1
 5ea:	44 e1       	ldi	r20, 0x14	; 20
 5ec:	51 e0       	ldi	r21, 0x01	; 1
 5ee:	ca 01       	movw	r24, r20
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <AX_SetAngle+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5f8:	d1 f7       	brne	.-12     	; 0x5ee <AX_SetAngle+0xa2>
	
	_delay_ms(50);
	
	AX_ReleaseTransmitter();
 5fa:	96 df       	rcall	.-212    	; 0x528 <AX_ReleaseTransmitter>
}
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	df 90       	pop	r13
 606:	cf 90       	pop	r12
 608:	bf 90       	pop	r11
 60a:	af 90       	pop	r10
 60c:	9f 90       	pop	r9
 60e:	8f 90       	pop	r8
 610:	7f 90       	pop	r7
 612:	6f 90       	pop	r6
 614:	08 95       	ret

00000616 <main>:
#include "control.h"
#include "uart.h"
#include "can.h"

int main(void)
{
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	df 93       	push	r29
 620:	cf 93       	push	r28
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	2a 97       	sbiw	r28, 0x0a	; 10
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
	DDRE |= (1 << PINE4);
 632:	ed e2       	ldi	r30, 0x2D	; 45
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	80 61       	ori	r24, 0x10	; 16
 63a:	80 83       	st	Z, r24
	PORTE &= (~(1 << PINE4));
 63c:	ee e2       	ldi	r30, 0x2E	; 46
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	8f 7e       	andi	r24, 0xEF	; 239
 644:	80 83       	st	Z, r24
	AX_UART_Init();
 646:	3a df       	rcall	.-396    	; 0x4bc <AX_UART_Init>
	CAN_Init();
 648:	5b de       	rcall	.-842    	; 0x300 <CAN_Init>
 64a:	20 e1       	ldi	r18, 0x10	; 16
 64c:	37 e2       	ldi	r19, 0x27	; 39
 64e:	44 e1       	ldi	r20, 0x14	; 20
 650:	51 e0       	ldi	r21, 0x01	; 1
 652:	ca 01       	movw	r24, r20
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 658:	21 50       	subi	r18, 0x01	; 1
 65a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 65c:	d1 f7       	brne	.-12     	; 0x652 <main+0x3c>

	canMsg message;
	
    while(1)
    {
       CAN_read(&message);
 65e:	7e 01       	movw	r14, r28
 660:	08 94       	sec
 662:	e1 1c       	adc	r14, r1
 664:	f1 1c       	adc	r15, r1
 666:	c7 01       	movw	r24, r14
 668:	d8 de       	rcall	.-592    	; 0x41a <CAN_read>
	   
	   action(message);  
 66a:	09 81       	ldd	r16, Y+1	; 0x01
 66c:	1a 81       	ldd	r17, Y+2	; 0x02
 66e:	2b 81       	ldd	r18, Y+3	; 0x03
 670:	3c 81       	ldd	r19, Y+4	; 0x04
 672:	4d 81       	ldd	r20, Y+5	; 0x05
 674:	5e 81       	ldd	r21, Y+6	; 0x06
 676:	6f 81       	ldd	r22, Y+7	; 0x07
 678:	78 85       	ldd	r23, Y+8	; 0x08
 67a:	89 85       	ldd	r24, Y+9	; 0x09
 67c:	9a 85       	ldd	r25, Y+10	; 0x0a
 67e:	70 dd       	rcall	.-1312   	; 0x160 <action>
 680:	f2 cf       	rjmp	.-28     	; 0x666 <main+0x50>

00000682 <__divsf3>:
 682:	0c d0       	rcall	.+24     	; 0x69c <__divsf3x>
 684:	e6 c0       	rjmp	.+460    	; 0x852 <__fp_round>
 686:	de d0       	rcall	.+444    	; 0x844 <__fp_pscB>
 688:	40 f0       	brcs	.+16     	; 0x69a <__divsf3+0x18>
 68a:	d5 d0       	rcall	.+426    	; 0x836 <__fp_pscA>
 68c:	30 f0       	brcs	.+12     	; 0x69a <__divsf3+0x18>
 68e:	21 f4       	brne	.+8      	; 0x698 <__divsf3+0x16>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	19 f0       	breq	.+6      	; 0x69a <__divsf3+0x18>
 694:	c7 c0       	rjmp	.+398    	; 0x824 <__fp_inf>
 696:	51 11       	cpse	r21, r1
 698:	10 c1       	rjmp	.+544    	; 0x8ba <__fp_szero>
 69a:	ca c0       	rjmp	.+404    	; 0x830 <__fp_nan>

0000069c <__divsf3x>:
 69c:	eb d0       	rcall	.+470    	; 0x874 <__fp_split3>
 69e:	98 f3       	brcs	.-26     	; 0x686 <__divsf3+0x4>

000006a0 <__divsf3_pse>:
 6a0:	99 23       	and	r25, r25
 6a2:	c9 f3       	breq	.-14     	; 0x696 <__divsf3+0x14>
 6a4:	55 23       	and	r21, r21
 6a6:	b1 f3       	breq	.-20     	; 0x694 <__divsf3+0x12>
 6a8:	95 1b       	sub	r25, r21
 6aa:	55 0b       	sbc	r21, r21
 6ac:	bb 27       	eor	r27, r27
 6ae:	aa 27       	eor	r26, r26
 6b0:	62 17       	cp	r22, r18
 6b2:	73 07       	cpc	r23, r19
 6b4:	84 07       	cpc	r24, r20
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <__divsf3_pse+0x26>
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	44 1f       	adc	r20, r20
 6c2:	aa 1f       	adc	r26, r26
 6c4:	a9 f3       	breq	.-22     	; 0x6b0 <__divsf3_pse+0x10>
 6c6:	33 d0       	rcall	.+102    	; 0x72e <__divsf3_pse+0x8e>
 6c8:	0e 2e       	mov	r0, r30
 6ca:	3a f0       	brmi	.+14     	; 0x6da <__divsf3_pse+0x3a>
 6cc:	e0 e8       	ldi	r30, 0x80	; 128
 6ce:	30 d0       	rcall	.+96     	; 0x730 <__divsf3_pse+0x90>
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	50 40       	sbci	r21, 0x00	; 0
 6d4:	e6 95       	lsr	r30
 6d6:	00 1c       	adc	r0, r0
 6d8:	ca f7       	brpl	.-14     	; 0x6cc <__divsf3_pse+0x2c>
 6da:	29 d0       	rcall	.+82     	; 0x72e <__divsf3_pse+0x8e>
 6dc:	fe 2f       	mov	r31, r30
 6de:	27 d0       	rcall	.+78     	; 0x72e <__divsf3_pse+0x8e>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	bb 1f       	adc	r27, r27
 6e8:	26 17       	cp	r18, r22
 6ea:	37 07       	cpc	r19, r23
 6ec:	48 07       	cpc	r20, r24
 6ee:	ab 07       	cpc	r26, r27
 6f0:	b0 e8       	ldi	r27, 0x80	; 128
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__divsf3_pse+0x56>
 6f4:	bb 0b       	sbc	r27, r27
 6f6:	80 2d       	mov	r24, r0
 6f8:	bf 01       	movw	r22, r30
 6fa:	ff 27       	eor	r31, r31
 6fc:	93 58       	subi	r25, 0x83	; 131
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	2a f0       	brmi	.+10     	; 0x70c <__divsf3_pse+0x6c>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	68 f0       	brcs	.+26     	; 0x722 <__divsf3_pse+0x82>
 708:	8d c0       	rjmp	.+282    	; 0x824 <__fp_inf>
 70a:	d7 c0       	rjmp	.+430    	; 0x8ba <__fp_szero>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	ec f3       	brlt	.-6      	; 0x70a <__divsf3_pse+0x6a>
 710:	98 3e       	cpi	r25, 0xE8	; 232
 712:	dc f3       	brlt	.-10     	; 0x70a <__divsf3_pse+0x6a>
 714:	86 95       	lsr	r24
 716:	77 95       	ror	r23
 718:	67 95       	ror	r22
 71a:	b7 95       	ror	r27
 71c:	f7 95       	ror	r31
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	c9 f7       	brne	.-14     	; 0x714 <__divsf3_pse+0x74>
 722:	88 0f       	add	r24, r24
 724:	91 1d       	adc	r25, r1
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret
 72e:	e1 e0       	ldi	r30, 0x01	; 1
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	bb 1f       	adc	r27, r27
 738:	62 17       	cp	r22, r18
 73a:	73 07       	cpc	r23, r19
 73c:	84 07       	cpc	r24, r20
 73e:	ba 07       	cpc	r27, r26
 740:	20 f0       	brcs	.+8      	; 0x74a <__divsf3_pse+0xaa>
 742:	62 1b       	sub	r22, r18
 744:	73 0b       	sbc	r23, r19
 746:	84 0b       	sbc	r24, r20
 748:	ba 0b       	sbc	r27, r26
 74a:	ee 1f       	adc	r30, r30
 74c:	88 f7       	brcc	.-30     	; 0x730 <__divsf3_pse+0x90>
 74e:	e0 95       	com	r30
 750:	08 95       	ret

00000752 <__fixunssfsi>:
 752:	98 d0       	rcall	.+304    	; 0x884 <__fp_splitA>
 754:	88 f0       	brcs	.+34     	; 0x778 <__fixunssfsi+0x26>
 756:	9f 57       	subi	r25, 0x7F	; 127
 758:	90 f0       	brcs	.+36     	; 0x77e <__fixunssfsi+0x2c>
 75a:	b9 2f       	mov	r27, r25
 75c:	99 27       	eor	r25, r25
 75e:	b7 51       	subi	r27, 0x17	; 23
 760:	a0 f0       	brcs	.+40     	; 0x78a <__fixunssfsi+0x38>
 762:	d1 f0       	breq	.+52     	; 0x798 <__fixunssfsi+0x46>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a f0       	brmi	.+6      	; 0x774 <__fixunssfsi+0x22>
 76e:	ba 95       	dec	r27
 770:	c9 f7       	brne	.-14     	; 0x764 <__fixunssfsi+0x12>
 772:	12 c0       	rjmp	.+36     	; 0x798 <__fixunssfsi+0x46>
 774:	b1 30       	cpi	r27, 0x01	; 1
 776:	81 f0       	breq	.+32     	; 0x798 <__fixunssfsi+0x46>
 778:	9f d0       	rcall	.+318    	; 0x8b8 <__fp_zero>
 77a:	b1 e0       	ldi	r27, 0x01	; 1
 77c:	08 95       	ret
 77e:	9c c0       	rjmp	.+312    	; 0x8b8 <__fp_zero>
 780:	67 2f       	mov	r22, r23
 782:	78 2f       	mov	r23, r24
 784:	88 27       	eor	r24, r24
 786:	b8 5f       	subi	r27, 0xF8	; 248
 788:	39 f0       	breq	.+14     	; 0x798 <__fixunssfsi+0x46>
 78a:	b9 3f       	cpi	r27, 0xF9	; 249
 78c:	cc f3       	brlt	.-14     	; 0x780 <__fixunssfsi+0x2e>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b3 95       	inc	r27
 796:	d9 f7       	brne	.-10     	; 0x78e <__fixunssfsi+0x3c>
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__fixunssfsi+0x56>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	08 95       	ret

000007aa <__floatunsisf>:
 7aa:	e8 94       	clt
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <__floatsisf+0x12>

000007ae <__floatsisf>:
 7ae:	97 fb       	bst	r25, 7
 7b0:	3e f4       	brtc	.+14     	; 0x7c0 <__floatsisf+0x12>
 7b2:	90 95       	com	r25
 7b4:	80 95       	com	r24
 7b6:	70 95       	com	r23
 7b8:	61 95       	neg	r22
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	99 23       	and	r25, r25
 7c2:	a9 f0       	breq	.+42     	; 0x7ee <__floatsisf+0x40>
 7c4:	f9 2f       	mov	r31, r25
 7c6:	96 e9       	ldi	r25, 0x96	; 150
 7c8:	bb 27       	eor	r27, r27
 7ca:	93 95       	inc	r25
 7cc:	f6 95       	lsr	r31
 7ce:	87 95       	ror	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b7 95       	ror	r27
 7d6:	f1 11       	cpse	r31, r1
 7d8:	f8 cf       	rjmp	.-16     	; 0x7ca <__floatsisf+0x1c>
 7da:	fa f4       	brpl	.+62     	; 0x81a <__floatsisf+0x6c>
 7dc:	bb 0f       	add	r27, r27
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__floatsisf+0x36>
 7e0:	60 ff       	sbrs	r22, 0
 7e2:	1b c0       	rjmp	.+54     	; 0x81a <__floatsisf+0x6c>
 7e4:	6f 5f       	subi	r22, 0xFF	; 255
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	16 c0       	rjmp	.+44     	; 0x81a <__floatsisf+0x6c>
 7ee:	88 23       	and	r24, r24
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <__floatsisf+0x48>
 7f2:	96 e9       	ldi	r25, 0x96	; 150
 7f4:	11 c0       	rjmp	.+34     	; 0x818 <__floatsisf+0x6a>
 7f6:	77 23       	and	r23, r23
 7f8:	21 f0       	breq	.+8      	; 0x802 <__floatsisf+0x54>
 7fa:	9e e8       	ldi	r25, 0x8E	; 142
 7fc:	87 2f       	mov	r24, r23
 7fe:	76 2f       	mov	r23, r22
 800:	05 c0       	rjmp	.+10     	; 0x80c <__floatsisf+0x5e>
 802:	66 23       	and	r22, r22
 804:	71 f0       	breq	.+28     	; 0x822 <__floatsisf+0x74>
 806:	96 e8       	ldi	r25, 0x86	; 134
 808:	86 2f       	mov	r24, r22
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	2a f0       	brmi	.+10     	; 0x81a <__floatsisf+0x6c>
 810:	9a 95       	dec	r25
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	da f7       	brpl	.-10     	; 0x810 <__floatsisf+0x62>
 81a:	88 0f       	add	r24, r24
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	97 f9       	bld	r25, 7
 822:	08 95       	ret

00000824 <__fp_inf>:
 824:	97 f9       	bld	r25, 7
 826:	9f 67       	ori	r25, 0x7F	; 127
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	08 95       	ret

00000830 <__fp_nan>:
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	08 95       	ret

00000836 <__fp_pscA>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	09 06       	cpc	r0, r25
 842:	08 95       	ret

00000844 <__fp_pscB>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	05 06       	cpc	r0, r21
 850:	08 95       	ret

00000852 <__fp_round>:
 852:	09 2e       	mov	r0, r25
 854:	03 94       	inc	r0
 856:	00 0c       	add	r0, r0
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
 85a:	88 23       	and	r24, r24
 85c:	52 f0       	brmi	.+20     	; 0x872 <__fp_round+0x20>
 85e:	bb 0f       	add	r27, r27
 860:	40 f4       	brcc	.+16     	; 0x872 <__fp_round+0x20>
 862:	bf 2b       	or	r27, r31
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0x18>
 866:	60 ff       	sbrs	r22, 0
 868:	04 c0       	rjmp	.+8      	; 0x872 <__fp_round+0x20>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__fp_split3>:
 874:	57 fd       	sbrc	r21, 7
 876:	90 58       	subi	r25, 0x80	; 128
 878:	44 0f       	add	r20, r20
 87a:	55 1f       	adc	r21, r21
 87c:	59 f0       	breq	.+22     	; 0x894 <__fp_splitA+0x10>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	71 f0       	breq	.+28     	; 0x89e <__fp_splitA+0x1a>
 882:	47 95       	ror	r20

00000884 <__fp_splitA>:
 884:	88 0f       	add	r24, r24
 886:	97 fb       	bst	r25, 7
 888:	99 1f       	adc	r25, r25
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_splitA+0x20>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	79 f0       	breq	.+30     	; 0x8ae <__fp_splitA+0x2a>
 890:	87 95       	ror	r24
 892:	08 95       	ret
 894:	12 16       	cp	r1, r18
 896:	13 06       	cpc	r1, r19
 898:	14 06       	cpc	r1, r20
 89a:	55 1f       	adc	r21, r21
 89c:	f2 cf       	rjmp	.-28     	; 0x882 <__fp_split3+0xe>
 89e:	46 95       	lsr	r20
 8a0:	f1 df       	rcall	.-30     	; 0x884 <__fp_splitA>
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__fp_splitA+0x30>
 8a4:	16 16       	cp	r1, r22
 8a6:	17 06       	cpc	r1, r23
 8a8:	18 06       	cpc	r1, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	f1 cf       	rjmp	.-30     	; 0x890 <__fp_splitA+0xc>
 8ae:	86 95       	lsr	r24
 8b0:	71 05       	cpc	r23, r1
 8b2:	61 05       	cpc	r22, r1
 8b4:	08 94       	sec
 8b6:	08 95       	ret

000008b8 <__fp_zero>:
 8b8:	e8 94       	clt

000008ba <__fp_szero>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	66 27       	eor	r22, r22
 8be:	77 27       	eor	r23, r23
 8c0:	cb 01       	movw	r24, r22
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__mulsf3>:
 8c6:	0b d0       	rcall	.+22     	; 0x8de <__mulsf3x>
 8c8:	c4 cf       	rjmp	.-120    	; 0x852 <__fp_round>
 8ca:	b5 df       	rcall	.-150    	; 0x836 <__fp_pscA>
 8cc:	28 f0       	brcs	.+10     	; 0x8d8 <__mulsf3+0x12>
 8ce:	ba df       	rcall	.-140    	; 0x844 <__fp_pscB>
 8d0:	18 f0       	brcs	.+6      	; 0x8d8 <__mulsf3+0x12>
 8d2:	95 23       	and	r25, r21
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <__mulsf3+0x12>
 8d6:	a6 cf       	rjmp	.-180    	; 0x824 <__fp_inf>
 8d8:	ab cf       	rjmp	.-170    	; 0x830 <__fp_nan>
 8da:	11 24       	eor	r1, r1
 8dc:	ee cf       	rjmp	.-36     	; 0x8ba <__fp_szero>

000008de <__mulsf3x>:
 8de:	ca df       	rcall	.-108    	; 0x874 <__fp_split3>
 8e0:	a0 f3       	brcs	.-24     	; 0x8ca <__mulsf3+0x4>

000008e2 <__mulsf3_pse>:
 8e2:	95 9f       	mul	r25, r21
 8e4:	d1 f3       	breq	.-12     	; 0x8da <__mulsf3+0x14>
 8e6:	95 0f       	add	r25, r21
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	55 1f       	adc	r21, r21
 8ec:	62 9f       	mul	r22, r18
 8ee:	f0 01       	movw	r30, r0
 8f0:	72 9f       	mul	r23, r18
 8f2:	bb 27       	eor	r27, r27
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	63 9f       	mul	r22, r19
 8fa:	aa 27       	eor	r26, r26
 8fc:	f0 0d       	add	r31, r0
 8fe:	b1 1d       	adc	r27, r1
 900:	aa 1f       	adc	r26, r26
 902:	64 9f       	mul	r22, r20
 904:	66 27       	eor	r22, r22
 906:	b0 0d       	add	r27, r0
 908:	a1 1d       	adc	r26, r1
 90a:	66 1f       	adc	r22, r22
 90c:	82 9f       	mul	r24, r18
 90e:	22 27       	eor	r18, r18
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	73 9f       	mul	r23, r19
 918:	b0 0d       	add	r27, r0
 91a:	a1 1d       	adc	r26, r1
 91c:	62 1f       	adc	r22, r18
 91e:	83 9f       	mul	r24, r19
 920:	a0 0d       	add	r26, r0
 922:	61 1d       	adc	r22, r1
 924:	22 1f       	adc	r18, r18
 926:	74 9f       	mul	r23, r20
 928:	33 27       	eor	r19, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	23 1f       	adc	r18, r19
 930:	84 9f       	mul	r24, r20
 932:	60 0d       	add	r22, r0
 934:	21 1d       	adc	r18, r1
 936:	82 2f       	mov	r24, r18
 938:	76 2f       	mov	r23, r22
 93a:	6a 2f       	mov	r22, r26
 93c:	11 24       	eor	r1, r1
 93e:	9f 57       	subi	r25, 0x7F	; 127
 940:	50 40       	sbci	r21, 0x00	; 0
 942:	8a f0       	brmi	.+34     	; 0x966 <__mulsf3_pse+0x84>
 944:	e1 f0       	breq	.+56     	; 0x97e <__mulsf3_pse+0x9c>
 946:	88 23       	and	r24, r24
 948:	4a f0       	brmi	.+18     	; 0x95c <__mulsf3_pse+0x7a>
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	bb 1f       	adc	r27, r27
 950:	66 1f       	adc	r22, r22
 952:	77 1f       	adc	r23, r23
 954:	88 1f       	adc	r24, r24
 956:	91 50       	subi	r25, 0x01	; 1
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	a9 f7       	brne	.-22     	; 0x946 <__mulsf3_pse+0x64>
 95c:	9e 3f       	cpi	r25, 0xFE	; 254
 95e:	51 05       	cpc	r21, r1
 960:	70 f0       	brcs	.+28     	; 0x97e <__mulsf3_pse+0x9c>
 962:	60 cf       	rjmp	.-320    	; 0x824 <__fp_inf>
 964:	aa cf       	rjmp	.-172    	; 0x8ba <__fp_szero>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	ec f3       	brlt	.-6      	; 0x964 <__mulsf3_pse+0x82>
 96a:	98 3e       	cpi	r25, 0xE8	; 232
 96c:	dc f3       	brlt	.-10     	; 0x964 <__mulsf3_pse+0x82>
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b7 95       	ror	r27
 976:	f7 95       	ror	r31
 978:	e7 95       	ror	r30
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	c1 f7       	brne	.-16     	; 0x96e <__mulsf3_pse+0x8c>
 97e:	fe 2b       	or	r31, r30
 980:	88 0f       	add	r24, r24
 982:	91 1d       	adc	r25, r1
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <_exit>:
 98c:	f8 94       	cli

0000098e <__stop_program>:
 98e:	ff cf       	rjmp	.-2      	; 0x98e <__stop_program>
